/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NotePanel.java
 *
 * Created on 2010-03-28, 10:25:59
 */
package pl.umk.mat.imare.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.midi.Instrument;
import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.MetaEventListener;
import javax.sound.midi.MetaMessage;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import pl.umk.mat.imare.midi.MidiPlayer;
import pl.umk.mat.imare.midi.MidiPlayerListener;
import pl.umk.mat.imare.reco.Note;
import pl.umk.mat.imare.reco.StaveData;

/**
 *
 * @author morti
 */
public class NotePanel extends javax.swing.JPanel implements MetaEventListener, MidiPlayerListener {

	MidiPlayer midi = null;
	private JPanel cursorPanel = null;
	String previnstrument = "";

	/** Creates new form NotePanel */
	public NotePanel() {
		initComponents();
		initMidi();

		stavePanel.addComponentListener(new ComponentListener() {

			@Override
			public void componentResized(ComponentEvent e) {
				Dimension size = e.getComponent().getSize();
				layerPane.setSize(size);

				layerPane.setPreferredSize(size);
			}

			@Override
			public void componentMoved(ComponentEvent e) {
			}

			@Override
			public void componentShown(ComponentEvent e) {
			}

			@Override
			public void componentHidden(ComponentEvent e) {
			}
		});

		stavePanel.setLocation(0, 0);
		stavePanel.setSize(scrollPane.getViewport().getSize());

		layerPane.setBackground(Color.white);
		scrollPane.setBackground(Color.white);
		stavePanel.setBackground(Color.white);

		cursorPanel = new JPanel();
		cursorPanel.setMaximumSize(new Dimension(1, 0));
		cursorPanel.setMinimumSize(new Dimension(1, 0));
		cursorPanel.setSize(1, stavePanel.getHeight());
		cursorPanel.setBackground(Color.red);

		cursorPanel.setLocation(-1, 0);
		layerPane.add(cursorPanel, JLayeredPane.DRAG_LAYER);

		TimeRullerPanel trp = new TimeRullerPanel(stavePanel);
		trp.setBounds(0, 0, 300, 20);
		layerPane.add(trp, new Integer(100));
	}

	private void initMidi() {

		midi = new MidiPlayer();
		midi.addListener(this);

		midi.addMidiPlayerListener(this);

		String[] s = midi.listAllInstuments();
		Arrays.sort(s);
		int index = Arrays.binarySearch(s, "Piano");

		for (int i = 0; i < s.length; i++) {
			jComboBox1.addItem(s[i]);
		}
		if (s.length > 0) {
			previnstrument = s[0];
		} else {
			playButton.setEnabled(false);
			jComboBox1.setEnabled(false);
		}
		if (!midi.getInitialized()) {
			playButton.setEnabled(false);
			jComboBox1.setEnabled(false);
		}

		jComboBox1.setSelectedIndex(index);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        scrollPane = new JScrollPane() {
            @Override
            public void paint(Graphics g) {
                g.setColor(getBackground());
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paint(g);
            }
        };
        layerPane = new JLayeredPane() {
            @Override
            public void paint(Graphics g) {
                g.setColor(getBackground());
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paint(g);
            }
        };
        stavePanel = new pl.umk.mat.imare.gui.StavePanel();
        jPanel1 = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        transparencyButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        scrollPane.setBackground(new java.awt.Color(255, 255, 255));
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        scrollPane.setDoubleBuffered(true);
        scrollPane.setPreferredSize(new java.awt.Dimension(450, 300));
        scrollPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                scrollPaneComponentResized(evt);
            }
        });

        layerPane.setBackground(new java.awt.Color(255, 255, 255));
        layerPane.setDoubleBuffered(true);

        stavePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stavePanelMouseClicked(evt);
            }
        });
        stavePanel.setLayout(new java.awt.BorderLayout());
        stavePanel.setBounds(0, 0, 570, 300);
        layerPane.add(stavePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        scrollPane.setViewportView(layerPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(scrollPane, gridBagConstraints);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/play.png"))); // NOI18N
        playButton.setPreferredSize(new java.awt.Dimension(27, 27));
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        jPanel1.add(playButton);

        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/pause.png"))); // NOI18N
        pauseButton.setEnabled(false);
        pauseButton.setPreferredSize(new java.awt.Dimension(27, 27));
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });
        jPanel1.add(pauseButton);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/stop.png"))); // NOI18N
        stopButton.setEnabled(false);
        stopButton.setPreferredSize(new java.awt.Dimension(27, 27));
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        jPanel1.add(stopButton);

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1);

        transparencyButton.setText("Przezroczystość Wł/Wył");
        transparencyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparencyButtonActionPerformed(evt);
            }
        });
        jPanel1.add(transparencyButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

	private void scrollPaneComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_scrollPaneComponentResized

//		int width = 0;
//		if(stavePanel.getWidth() < scrollPane.getWidth()) width = scrollPane.getWidth();
//		else width = stavePanel.getWidth();
//		stavePanel.setPreferredSize(new Dimension(
//				Math.max(stavePanel.getWidth(), scrollPane.getWidth()),
//					scrollPane.getHeight() - scrollPane.getHorizontalScrollBar().getHeight() - 10));
		JViewport view = scrollPane.getViewport();
		stavePanel.setSize(stavePanel.getWidth(), view.getHeight());
		stavePanel.revalidate();

		if (cursorPanel != null) {
			cursorPanel.setSize(1, scrollPane.getHeight());
		}
}//GEN-LAST:event_scrollPaneComponentResized

	private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
		if (cursorPanel != null) {
			cursorPanel.setSize(1, scrollPane.getHeight());
		}

		try {
                        long pos = midi.getPosition();
			midi.createFromNotes(stavePanel.getStaveData());
                        midi.setPosition(pos);
		} catch (InvalidMidiDataException ex) {
			Logger.getLogger(NoteFrame.class.getName()).log(Level.SEVERE, null, ex);
		}
		String s;
		if(jComboBox1.getSelectedItem() != null) {
			s = jComboBox1.getSelectedItem().toString();
		}
		else return;
		if (!s.contentEquals(previnstrument)) {
			previnstrument = s;
			long p = midi.getPosition();
			Instrument ins = midi.findInstrument(s);
			try {
				midi.setSequenceInstrument(0, ins);
				midi.setPosition(p);
			} catch (InvalidMidiDataException ex) {
				Logger.getLogger(NoteFrame.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
		if (!stopButton.isEnabled() && cursorPanel.getLocation().x==-1) {
			scrollPane.getHorizontalScrollBar().setValue(0);
		}

		pauseButton.setEnabled(true);
		stopButton.setEnabled(true);
		playButton.setEnabled(false);
		jComboBox1.setEnabled(false);
		midi.start();
}//GEN-LAST:event_playButtonActionPerformed

	private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
		midi.pause();
		pauseButton.setEnabled(false);
		stopButton.setEnabled(true);
		playButton.setEnabled(true);
		jComboBox1.setEnabled(true);
}//GEN-LAST:event_pauseButtonActionPerformed

	private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
		midi.setPosition(0);
                midi.stop();
		pauseButton.setEnabled(false);
		stopButton.setEnabled(false);
		playButton.setEnabled(true);
		jComboBox1.setEnabled(true);
}//GEN-LAST:event_stopButtonActionPerformed

	private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
}//GEN-LAST:event_jComboBox1ActionPerformed

	private void transparencyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparencyButtonActionPerformed
		stavePanel.setNoteVolumeAlphaBlending(!stavePanel.isNoteVolumeAlphaBlending());
}//GEN-LAST:event_transparencyButtonActionPerformed

        private void stavePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stavePanelMouseClicked
            if(playButton.isEnabled()){
                long pos = (long) ((evt.getX() - stavePanel.getStartPosition()) / (double) (midi.getTempo()*stavePanel.getPixelsPerWholeNote())*1000000);
                midi.setPosition(pos);
                cursorPanel.setLocation(evt.getX(), 0);
            }
        }//GEN-LAST:event_stavePanelMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLayeredPane layerPane;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton playButton;
    private javax.swing.JScrollPane scrollPane;
    private pl.umk.mat.imare.gui.StavePanel stavePanel;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton transparencyButton;
    // End of variables declaration//GEN-END:variables

	@Override
	public void meta(MetaMessage meta) {
		if (meta.getType() == MidiPlayer.END_OF_TRACK_MESSAGE) {
			stopButtonActionPerformed(null);
		}
	}

	@Override
	public void positionChanged(long newPosition) {
		double sec = (double) newPosition / 1000000.0;
		double tempo = midi.getTempo();
		int x = (int) (sec * tempo
				* stavePanel.getPixelsPerWholeNote())
				+ stavePanel.getStartPosition() - 7;

		cursorPanel.setLocation(x, 0);
		if (x >= (scrollPane.getHorizontalScrollBar().getValue() + scrollPane.getHorizontalScrollBar().getVisibleAmount()) / (double) scrollPane.getHorizontalScrollBar().getMaximum() * stavePanel.getWidth()) {
			scrollPane.getHorizontalScrollBar().setValue(scrollPane.getHorizontalScrollBar().getValue() + scrollPane.getHorizontalScrollBar().getVisibleAmount());
		}
	}

	@Override
	public void notifyFinished() {
		if (cursorPanel != null) {
			cursorPanel.setLocation(-1, 0);
		}
	}

	private void setTime() {
//		if (midi == null) {
//			return;
//		}
//		DecimalFormat df = new DecimalFormat("00.000");
//		double length = midi.getLength() / 1000000.0;
//		String str = "<html><b>Długość:</b> ";
//
//		if (length >= 60) {
//
//			str += Integer.toString((int) (length / 60)) + ":";
//			length %= 60;
//		}
//		str += df.format(length) + "</html>";
//		lengthLabel.setText(str);
	}

	public void setNotes(StaveData notes) {
		stavePanel.setStaveData(notes);
		try {
			StaveData sd = stavePanel.getStaveData();
			if (sd != null && midi != null) {
				midi.createFromNotes(sd);
			}

			setTime();

		} catch (InvalidMidiDataException ex) {
			Logger.getLogger(NoteFrame.class.getName()).log(Level.SEVERE, null, ex);
		}

//        layerPane.setBackground(Color.white);
//        scrollPane.setBackground(Color.white);
//        stavePanel.setBackground(Color.white);
//
//        layerPane.setSize(stavePanel.getSize());
//        layerPane.setPreferredSize(stavePanel.getSize());
//
//        cursorPanel = new JPanel();
//        cursorPanel.setMaximumSize(new Dimension(1, 0));
//        cursorPanel.setMinimumSize(new Dimension(1, 0));
//        cursorPanel.setSize(1, stavePanel.getHeight());
//        cursorPanel.setBackground(Color.red);
//
//        cursorPanel.setLocation(-1, 0);
//        layerPane.add(cursorPanel, new Integer(1));
//
//        stavePanel.setSize(
//                Math.max(layerPane.getWidth(), scrollPane.getWidth()),
//                Math.max(layerPane.getHeight(), scrollPane.getHeight()));
//        timePanel.setSize(stavePanel.getWidth(), timePanel.getHeight());
//        drawTime();
	}

	public void addNote(Note n) {
		stavePanel.addNote(n);

		try {
			StaveData sd = stavePanel.getStaveData();
			if (sd != null && midi != null) {
				midi.createFromNotes(sd);
			}
		} catch (InvalidMidiDataException ex) {
			Logger.getLogger(NoteFrame.class.getName()).log(Level.SEVERE, null, ex);
		}

		setTime();
	}

	public void close() {
		if (midi != null) {
			midi.stop();
			midi.close();
			midi = null;
		}
	}

	public void enableMidiButtons() {
		if (midi != null && midi.listAllInstuments().length > 0 && midi.getInitialized()) {
			playButton.setEnabled(true);
			jComboBox1.setEnabled(true);
		}
	}

	public void disableMidiButtons() {
		if (midi != null) {
			midi.stop();
		}
		playButton.setEnabled(false);
		pauseButton.setEnabled(false);
		stopButton.setEnabled(false);
		jComboBox1.setEnabled(false);
	}

	public void scrollToEnd() {
//		scrollPane.getHorizontalScrollBar().setValue(scrollPane.getHorizontalScrollBar().getValue()+scrollPane.getHorizontalScrollBar().getVisibleAmount());
		scrollPane.getHorizontalScrollBar().setValue(scrollPane.getHorizontalScrollBar().getMaximum());
	}

	public StavePanel getStavePanel() {
		return stavePanel;
	}

	public void stopMidiPlayback() {
		if(midi != null) {
			midi.setPosition(0);
			midi.stop();
			pauseButton.setEnabled(false);
			stopButton.setEnabled(false);
			playButton.setEnabled(true);
			jComboBox1.setEnabled(true);
		}
	}
}
