/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WizardFrame.java
 *
 * Created on 2010-03-31, 09:42:26
 */

package pl.umk.mat.imare.gui;

import java.awt.Component;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import pl.umk.mat.imare.gui.related.ProjectPaneListener;
import pl.umk.mat.imare.gui.related.RecognitionProgressListener;
import pl.umk.mat.imare.gui.related.WizardFrameListener;
import pl.umk.mat.imare.io.Config;
import pl.umk.mat.imare.io.ProgressListener;
import pl.umk.mat.imare.io.Wave;
import pl.umk.mat.imare.reco.Recognizer;
import pl.umk.mat.imare.reco.Transcriber;

/**
 *
 * @author Bartek
 */
public class WizardFrame extends javax.swing.JInternalFrame implements ProjectPaneListener, RecognitionProgressListener, ProgressListener {

	private LinkedList<WizardFrameListener> listeners = new LinkedList<WizardFrameListener>();
    private int currentStep;
    private final int stepsNo = 4;
	private JPanel[] stepPanels = new JPanel[4];
	
	private MainGUI mainWindow = null;
	private RecognitionProgress progress = null;

    /** Creates new form WizardFrame */
    public WizardFrame() {
        initComponents();        
        currentStep = 1;
        updateStepCount();

		stepPanels[0] = openAudioStep;
		stepPanels[1] = recognizeStep;
		stepPanels[2] = noteStep;
		stepPanels[3] = saveStep;

		for(int i=1; i < 4; i++) stepPanels[i].setVisible(false);
//		stepPanels[0].setVisible(true);

		imagePanel.setVisible(false);

		layeredPane.addHierarchyBoundsListener(layerBoundsListener);
    }

    private void updateStepCount() {
        btnPrevious.setEnabled(currentStep > 1);
        btnNext.setEnabled(currentStep < stepsNo);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        imagePanel = new javax.swing.JPanel();
        layeredPane = new javax.swing.JLayeredPane();
        openAudioStep = new javax.swing.JPanel();
        infoLabel1 = new javax.swing.JLabel();
        audioPath = new javax.swing.JTextField();
        loadAudioButton = new javax.swing.JButton();
        wavePanel1 = new pl.umk.mat.imare.gui.WavePanel();
        recognizeStep = new javax.swing.JPanel();
        recognizerOptionsPanel1 = new pl.umk.mat.imare.gui.RecognizerOptionsPanel();
        noteStep = new javax.swing.JPanel();
        notePanel1 = new pl.umk.mat.imare.gui.NotePanel();
        saveStep = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setResizable(true);
        setTitle("Kreator Projektu");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnPrevious.setText("< Wstecz");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });
        buttonPanel.add(btnPrevious);

        btnNext.setText("Dalej >");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        buttonPanel.add(btnNext);

        btnCancel.setText("Anuluj");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        buttonPanel.add(btnCancel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(buttonPanel, gridBagConstraints);

        imagePanel.setBackground(new java.awt.Color(0, 120, 0));

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 466, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(imagePanel, gridBagConstraints);

        layeredPane.setPreferredSize(null);

        infoLabel1.setText("Wybierz plik audio do przetworzenia:");

        loadAudioButton.setText("Wybierz Plik");
        loadAudioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAudioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout openAudioStepLayout = new javax.swing.GroupLayout(openAudioStep);
        openAudioStep.setLayout(openAudioStepLayout);
        openAudioStepLayout.setHorizontalGroup(
            openAudioStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, openAudioStepLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(openAudioStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(wavePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .addComponent(infoLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .addGroup(openAudioStepLayout.createSequentialGroup()
                        .addComponent(audioPath, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadAudioButton)))
                .addContainerGap())
        );
        openAudioStepLayout.setVerticalGroup(
            openAudioStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(openAudioStepLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(openAudioStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(audioPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadAudioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wavePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addContainerGap())
        );

        openAudioStep.setBounds(0, 0, 540, 440);
        layeredPane.add(openAudioStep, new Integer(4));

        javax.swing.GroupLayout recognizeStepLayout = new javax.swing.GroupLayout(recognizeStep);
        recognizeStep.setLayout(recognizeStepLayout);
        recognizeStepLayout.setHorizontalGroup(
            recognizeStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recognizeStepLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recognizerOptionsPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );
        recognizeStepLayout.setVerticalGroup(
            recognizeStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, recognizeStepLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recognizerOptionsPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, Short.MAX_VALUE)
                .addContainerGap())
        );

        recognizeStep.setBounds(0, 0, 540, 440);
        layeredPane.add(recognizeStep, new Integer(3));

        javax.swing.GroupLayout noteStepLayout = new javax.swing.GroupLayout(noteStep);
        noteStep.setLayout(noteStepLayout);
        noteStepLayout.setHorizontalGroup(
            noteStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noteStepLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(notePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );
        noteStepLayout.setVerticalGroup(
            noteStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, noteStepLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(notePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                .addContainerGap())
        );

        noteStep.setBounds(0, 0, 540, 440);
        layeredPane.add(noteStep, new Integer(2));

        saveStep.setLayout(new java.awt.GridBagLayout());

        jButton1.setText("Zapisz Projekt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        saveStep.add(jButton1, new java.awt.GridBagConstraints());

        saveStep.setBounds(0, 0, 540, 440);
        layeredPane.add(saveStep, javax.swing.JLayeredPane.DEFAULT_LAYER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(layeredPane, gridBagConstraints);

        setBounds(0, 0, 669, 533);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
//        setVisible(false);
		dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
		notePanel1.stopMidiPlayback();
		wavePanel1.stopWavePlayback();
		
		btnNext.setText("Dalej >");
		stepPanels[currentStep-1].setVisible(false);
        currentStep--;		
        updateStepCount();
		
		stepPanels[currentStep-1].setVisible(true);

		notifyStepChanged(currentStep);
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
		notePanel1.stopMidiPlayback();
		wavePanel1.stopWavePlayback();
		
		if(currentStep == 1) {
			if(mainWindow.getOpenedWave() == null) {
				JOptionPane.showMessageDialog(this, "Nie wybrano pliku audio!", "Brak pliku",
						JOptionPane.OK_OPTION | JOptionPane.ERROR_MESSAGE);
				return;
			}
		}
		else if(currentStep == 2) {
			Recognizer reco = recognizerOptionsPanel1.getRecognizer(mainWindow.getOpenedWave());
			progress = new RecognitionProgress(reco, false);
			getDesktopPane().add(progress);
			progress.setVisible(true);
			progress.addListener(this);
			hide();
			reco.start();			
			return;
		}
		else if(currentStep == 3) {
			stepSave();
			return;
		}

		stepPanels[currentStep-1].setVisible(false);
        currentStep++;
        updateStepCount();

		stepPanels[currentStep-1].setVisible(true);

		notifyStepChanged(currentStep);		
    }//GEN-LAST:event_btnNextActionPerformed

	private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
		try {
			setSelected(true);
		} catch (PropertyVetoException ex) {
			Logger.getLogger(WizardFrame.class.getName()).log(Level.SEVERE, null, ex);
		}

		Component c = getDesktopPane();
		while(!(c instanceof MainGUI) && c != null) c = c.getParent();

		if(c != null) {
			mainWindow = (MainGUI)c;
			mainWindow.showProjectPane(true);
		}


		int x = (getDesktopPane().getWidth() - getWidth())/2;
		int y = (getDesktopPane().getHeight() - getHeight())/2;
		setLocation(x, y);
	}//GEN-LAST:event_formAncestorAdded

	private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
		int x = (getDesktopPane().getWidth() - getWidth())/2;
		int y = (getDesktopPane().getHeight() - getHeight())/2;
		setLocation(x, y);
	}//GEN-LAST:event_formAncestorResized

	private void loadAudioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAudioButtonActionPerformed
		JFileChooser fc = new JFileChooser();
		fc.setFileFilter(new javax.swing.filechooser.FileFilter() {

			@Override
			public boolean accept(File f) {
				return f.getName().endsWith(".wav") ||
						f.getName().endsWith(".mp3") ||
						f.isDirectory();
			}

			@Override
			public String getDescription() {
				return "Obsługiwane formaty (*.wav, *.mp3)";
			}
		});

		String[] s = Config.read("RecentWaveDirectory");
        if (!s[0].equals("0")) {
            fc.setCurrentDirectory(new File(s[0]));
        }

		int res = fc.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
			audioPath.setText(fc.getSelectedFile().getAbsolutePath());

			final File f = fc.getSelectedFile();
			Config.write("RecentWaveDirectory", fc.getCurrentDirectory().getPath());
			mainWindow.openAudioFile(f, this);
//			final ProgressFrame pf = new ProgressFrame(null);
//
//			Runnable r = new Runnable() {
//
//				@Override
//				public void run() {
//					try {
//						Wave wave = Wave.create(f, pf);
//						if (wave != null) {
//							mainWindow.setOpenedWave(wave);
//							wavePanel1.setWave(wave);
//						}
//					} catch (FileDoesNotExistException ex) {
//						Logger.getLogger(WizardFrame.class.getName()).log(Level.SEVERE, null, ex);
//					} catch (UnsupportedAudioFileException ex) {
//						Logger.getLogger(WizardFrame.class.getName()).log(Level.SEVERE, null, ex);
//					} catch (IOException ex) {
//						Logger.getLogger(WizardFrame.class.getName()).log(Level.SEVERE, null, ex);
//					}
//				}
//			};
		}


//		BufferedImage waveImage = mainWindow.getWavePlayerFrame().getWaveImage();
//		JPanel wavePanel = new JPanel() {
//			@Override
//			public void paint(Graphics g) {
//				super.paint(g);
//				g.drawImage(mainWindow.getWavePlayerFrame().getWaveImage(), 0, 0, null);
//			}
//		};
//		wavePanel.setSize(waveImage.getWidth(), waveImage.getHeight());
//		wavePanel.setPreferredSize(new Dimension(waveImage.getWidth(), waveImage.getHeight()));
//		jScrollPane1.setViewportView(wavePanel);
	}//GEN-LAST:event_loadAudioButtonActionPerformed

	private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
		wavePanel1.close();
		notePanel1.close();
		notifyFrameClosed();
	}//GEN-LAST:event_formInternalFrameClosed

	private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
	}//GEN-LAST:event_formComponentHidden

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//		mainWindow.miSaveProjectActionPerformed(null);
		if(mainWindow.saveProject()) {
			dispose();
			
			mainWindow.showWaveFrame();
			mainWindow.showNoteFrame();
			mainWindow.layoutWindowsVertically();
		}
	}//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField audioPath;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JLabel infoLabel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JButton loadAudioButton;
    private pl.umk.mat.imare.gui.NotePanel notePanel1;
    private javax.swing.JPanel noteStep;
    private javax.swing.JPanel openAudioStep;
    private javax.swing.JPanel recognizeStep;
    private pl.umk.mat.imare.gui.RecognizerOptionsPanel recognizerOptionsPanel1;
    private javax.swing.JPanel saveStep;
    private pl.umk.mat.imare.gui.WavePanel wavePanel1;
    // End of variables declaration//GEN-END:variables

	@Override
	public void stepClicked(int step) {
		if(step == 3) {
			stepSave();
			return;
		} if(step == 2) {
			btnNext.setText("Zapisz");
		} else {
			btnNext.setText("Dalej >");
		}
		stepPanels[currentStep-1].setVisible(false);
		currentStep = step+1;
		updateStepCount();
		stepPanels[currentStep-1].setVisible(true);

		setVisible(true);
	}

	HierarchyBoundsListener layerBoundsListener = new HierarchyBoundsListener() {
		@Override
		public void ancestorMoved(HierarchyEvent e) {
		}

		@Override
		public void ancestorResized(HierarchyEvent e) {
			for(JPanel step : stepPanels) {
				step.setBounds(e.getComponent().getBounds());
			}
		}
	};

	private void notifyStepChanged(int step) {
		for(WizardFrameListener wfl : listeners) {
			wfl.stepChanged(step);
		}
	}

	private void notifyFrameClosed() {
		for(WizardFrameListener wfl : listeners) {
			wfl.wizardFrameClosed();
		}
	}

	public void addListener(WizardFrameListener wfl) {
		listeners.add(wfl);
	}

	public void removeListener(WizardFrameListener wfl) {
		listeners.remove(wfl);
	}

	@Override
	public void allFinished(Transcriber transcriber) {
		stepPanels[currentStep-1].setVisible(false);
		currentStep++;
		updateStepCount();

		stepPanels[currentStep-1].setVisible(true);

		if(progress != null) {
			notePanel1.setNotes(transcriber.getStaveData());
		}
		notifyStepChanged(currentStep);

		if(currentStep == 3) btnNext.setText("Zapisz");
		
		show();
	}

	@Override
	public void cancelled() {
		show();
	}


	private void stepSave() {
		currentStep++;
		notifyStepChanged(4);
		if(mainWindow.saveProject()) {
			dispose();

			mainWindow.showWaveFrame();
			mainWindow.showNoteFrame();

			java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                mainWindow.layoutWindowsVertically();
            }
        });
		}
		else {
			currentStep--;
			notifyStepChanged(3);
		}
	}

	@Override
	public void jobStarted(Object sender) {
		mainWindow.jobStarted(sender);
	}

	@Override
	public void jobProgress(Object sender, float progress) {
		mainWindow.jobProgress(sender, progress);
	}

	@Override
	public void jobFinished(Object sender) {
		wavePanel1.setWave((Wave)sender);
		mainWindow.jobFinished(sender);
	}
}
