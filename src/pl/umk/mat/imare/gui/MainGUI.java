/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainGUI.java
 *
 * Created on 2010-02-10, 15:30:43
 */
package pl.umk.mat.imare.gui;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.io.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import pl.umk.mat.imare.exception.FileDoesNotExistException;
import pl.umk.mat.imare.io.Config;
import pl.umk.mat.imare.io.FrameInfo;
import pl.umk.mat.imare.io.LilySong;
import pl.umk.mat.imare.io.ProgressListener;
import pl.umk.mat.imare.io.ProjectData;
import pl.umk.mat.imare.io.Wave;
import pl.umk.mat.imare.reco.StaveData;

/**
 *
 * @author Bartek
 */
public class MainGUI extends javax.swing.JFrame implements ProgressListener {

	private StartupFrame startupFrame = null;
	private WavePlayer wavePlayerFrame = new WavePlayer();
	private NoteFrame noteFrame = new NoteFrame();
	private RecognizeFrame recoFrame = new RecognizeFrame();
	private Wave openedWave = null;
	private StaveData notes = null;
	private boolean projectSaved = true;
	private String[] recentAudioFiles = null;
	private WizardFrame wizardFrame = null;
	private String[] recentProjects;
	private ProjectPane projectProgressPane1 = new ProjectPane(this);
	private ProgressFrame progressFrame = null;

	/** Creates new form MainGUI */
	public MainGUI(boolean canShowStartup) {
		initAllComponents();
//		setExtendedState(getExtendedState() | MAXIMIZED_BOTH);


		startupFrame = new StartupFrame();

		if (canShowStartup) {
			String[] s = Config.read("ShowStartupScreen");
			if (s[0].equals("1")) {
				startupFrame.setVisible(true);
				int x = (desktopPane.getWidth() - startupFrame.getWidth()) / 2;
				int y = (desktopPane.getHeight() - startupFrame.getHeight()) / 2;
				startupFrame.setLocation(x, y);
				desktopPane.add(startupFrame);
			}
		}

		desktopPane.add(wavePlayerFrame);
		desktopPane.add(noteFrame);
		desktopPane.add(recoFrame);

		setNotes(null);
		setOpenedWave(null);
//		disableSaveButtons();
		try {
			setIconImage(ImageIO.read(getClass().getResource("/pl/umk/mat/imare/gui/gfx/imare.PNG")));
		} catch (IOException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public MainGUI(/*Wave wave, StaveData notes*/File projectFile) {
		initAllComponents();

		desktopPane.add(wavePlayerFrame);
		desktopPane.add(noteFrame);
		desktopPane.add(recoFrame);

//		setOpenedWave(wave);
//		setNotes(notes);

		openProject(projectFile);

		showWaveFrame();

		try {
			setIconImage(ImageIO.read(getClass().getResource("/pl/umk/mat/imare/gui/gfx/imare.PNG")));
		} catch (IOException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
//		enableSaveButtons();
	}

	public void initAllComponents() {
		initComponents();
		GridBagConstraints cst = new GridBagConstraints();
		cst.gridx = 0;
		cst.gridy = 5;
		cst.fill = GridBagConstraints.HORIZONTAL;
		getContentPane().add(projectProgressPane1, cst);
		projectProgressPane1.setVisible(false);
		projectProgressPane1.setPreferredSize(new Dimension(100, 100));
	}

	private void disableSaveButtons() {
		miSaveProject.setEnabled(false);
		btnSaveProject.setEnabled(false);
		btnSaveProjectAs.setEnabled(false);
	}

	private void enableSaveButtons() {
		miSaveProject.setEnabled(true);
		btnSaveProject.setEnabled(true);
		btnSaveProjectAs.setEnabled(true);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jToolBar1 = new javax.swing.JToolBar();
        btnNew = new javax.swing.JButton();
        btnOpenProject = new javax.swing.JButton();
        btnSaveProject = new javax.swing.JButton();
        btnSaveProjectAs = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnPreferences = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnAbout = new javax.swing.JButton();
        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        miNewProject = new javax.swing.JMenuItem();
        miOpenProject = new javax.swing.JMenuItem();
        mRecentProjects = new javax.swing.JMenu();
        miSaveProject = new javax.swing.JMenuItem();
        miCloseProject = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miOpenWave = new javax.swing.JMenuItem();
        mRecentItems = new javax.swing.JMenu();
        miExport = new javax.swing.JMenu();
        miExportToPDF = new javax.swing.JMenuItem();
        miExportToMIDI = new javax.swing.JMenuItem();
        miLilypond = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miClose = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        miRecognition = new javax.swing.JMenuItem();
        miOptions = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        miWAVE = new javax.swing.JMenuItem();
        miNotes = new javax.swing.JMenuItem();
        miRealTime = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        miLayoutVertically = new javax.swing.JMenuItem();
        miLayoutHorizontally = new javax.swing.JMenuItem();
        miLayoutCascade = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("IMARE");
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setPreferredSize(new java.awt.Dimension(2, 29));

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/new.png"))); // NOI18N
        btnNew.setToolTipText("Nowy projekt");
        btnNew.setFocusable(false);
        btnNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNew);

        btnOpenProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/open.png"))); // NOI18N
        btnOpenProject.setToolTipText("Otw√≥rz projekt");
        btnOpenProject.setFocusable(false);
        btnOpenProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpenProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenProjectActionPerformed(evt);
            }
        });
        jToolBar1.add(btnOpenProject);

        btnSaveProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/save.png"))); // NOI18N
        btnSaveProject.setToolTipText("Zapisz projekt");
        btnSaveProject.setFocusable(false);
        btnSaveProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSaveProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSaveProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveProjectActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSaveProject);

        btnSaveProjectAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/save_as.png"))); // NOI18N
        btnSaveProjectAs.setToolTipText("Zapisz projekt jako...");
        btnSaveProjectAs.setFocusable(false);
        btnSaveProjectAs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSaveProjectAs.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnSaveProjectAs);
        jToolBar1.add(jSeparator3);

        btnPreferences.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/configure.png"))); // NOI18N
        btnPreferences.setToolTipText("Preferencje...");
        btnPreferences.setFocusable(false);
        btnPreferences.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPreferences.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreferencesActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPreferences);
        jToolBar1.add(jSeparator4);

        btnAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/help.png"))); // NOI18N
        btnAbout.setToolTipText("O programie...");
        btnAbout.setFocusable(false);
        btnAbout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAbout.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAboutActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAbout);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jToolBar1, gridBagConstraints);

        desktopPane.setBackground(java.awt.SystemColor.controlShadow);
        desktopPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        desktopPane.setDoubleBuffered(true);
        desktopPane.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(desktopPane, gridBagConstraints);

        fileMenu.setText("Plik");

        miNewProject.setText("Nowy projekt");
        miNewProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewProjectActionPerformed(evt);
            }
        });
        fileMenu.add(miNewProject);

        miOpenProject.setText("Otw√≥rz projekt");
        miOpenProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenProjectActionPerformed(evt);
            }
        });
        fileMenu.add(miOpenProject);

        mRecentProjects.setText("Ostatnio otwierane");
        mRecentProjects.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mRecentProjectsStateChanged(evt);
            }
        });
        fileMenu.add(mRecentProjects);

        miSaveProject.setText("Zapisz projekt");
        miSaveProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveProjectActionPerformed(evt);
            }
        });
        fileMenu.add(miSaveProject);

        miCloseProject.setText("Zamknij projekt");
        miCloseProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCloseProjectActionPerformed(evt);
            }
        });
        fileMenu.add(miCloseProject);
        fileMenu.add(jSeparator1);

        miOpenWave.setText("Otw√≥rz plik audio");
        miOpenWave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenWaveActionPerformed(evt);
            }
        });
        fileMenu.add(miOpenWave);

        mRecentItems.setText("Ostatnio otwierane");
        mRecentItems.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mRecentItemsStateChanged(evt);
            }
        });
        fileMenu.add(mRecentItems);

        miExport.setText("Eksport");

        miExportToPDF.setText("PDF");
        miExportToPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExportToPDFActionPerformed(evt);
            }
        });
        miExport.add(miExportToPDF);

        miExportToMIDI.setText("MIDI");
        miExportToMIDI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExportToMIDIActionPerformed(evt);
            }
        });
        miExport.add(miExportToMIDI);

        miLilypond.setText("LilyPond");
        miLilypond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLilypondActionPerformed(evt);
            }
        });
        miExport.add(miLilypond);

        fileMenu.add(miExport);
        fileMenu.add(jSeparator2);

        miClose.setText("Zamknij");
        miClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCloseActionPerformed(evt);
            }
        });
        fileMenu.add(miClose);

        menuBar.add(fileMenu);

        toolsMenu.setText("Narzƒôdzia");
        toolsMenu.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                toolsMenuStateChanged(evt);
            }
        });

        miRecognition.setText("Rozpoznawanie");
        miRecognition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRecognitionActionPerformed(evt);
            }
        });
        toolsMenu.add(miRecognition);

        miOptions.setText("Opcje...");
        miOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOptionsActionPerformed(evt);
            }
        });
        toolsMenu.add(miOptions);

        menuBar.add(toolsMenu);

        jMenu1.setText("Okna");

        miWAVE.setText("Strumie≈Ñ Audio");
        miWAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miWAVEActionPerformed(evt);
            }
        });
        jMenu1.add(miWAVE);

        miNotes.setText("Nuty");
        miNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNotesActionPerformed(evt);
            }
        });
        jMenu1.add(miNotes);

        miRealTime.setText("<html>Rozpoznawanie <br>w czasie rzeczywistym</html>");
        miRealTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRealTimeActionPerformed(evt);
            }
        });
        jMenu1.add(miRealTime);
        jMenu1.add(jSeparator5);

        miLayoutVertically.setText("U≈Ç√≥≈º pionowo");
        miLayoutVertically.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLayoutVerticallyActionPerformed(evt);
            }
        });
        jMenu1.add(miLayoutVertically);

        miLayoutHorizontally.setText("U≈Ç√≥≈º poziomo");
        miLayoutHorizontally.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLayoutHorizontallyActionPerformed(evt);
            }
        });
        jMenu1.add(miLayoutHorizontally);

        miLayoutCascade.setText("U≈Ç√≥≈º kaskadowo");
        miLayoutCascade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLayoutCascadeActionPerformed(evt);
            }
        });
        jMenu1.add(miLayoutCascade);

        menuBar.add(jMenu1);

        helpMenu.setText("Pomoc");

        miAbout.setText("O programie...");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        helpMenu.add(miAbout);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-931)/2, (screenSize.height-734)/2, 931, 734);
    }// </editor-fold>//GEN-END:initComponents

    private void miCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCloseActionPerformed
		dispose();
    }//GEN-LAST:event_miCloseActionPerformed

    private void miOpenWaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenWaveActionPerformed
		JFileChooser fc = new JFileChooser();
		fc.setFileFilter(new javax.swing.filechooser.FileFilter() {

			@Override
			public boolean accept(File f) {
				return f.getName().endsWith(".wav")
						|| f.getName().endsWith(".mp3")
						|| f.isDirectory();
			}

			@Override
			public String getDescription() {
				return "Obs≈Çugiwane formaty (*.wav, *.mp3)";
			}
		});
		String[] s = Config.read("RecentWaveDirectory");
		if (!s[0].equals("0")) {
			fc.setCurrentDirectory(new File(s[0]));
		}
		int res = fc.showOpenDialog(this);
		if (res == JFileChooser.APPROVE_OPTION) {
			recentAudioFiles = Config.read("RecentAudioFiles");
			File f = fc.getSelectedFile();
			int i = 0;
			String[] rfl = Config.read("RecentItemsNumber");
			if (recentAudioFiles.length > Integer.parseInt(rfl[0])) {
				Config.popBack("RecentAudioFiles");
				recentAudioFiles = Config.read("RecentAudioFiles");
			}
			for (String ss : recentAudioFiles) {
				if (ss.equals(f.getAbsolutePath())) {
					Config.removeAt("RecentAudioFiles", i);
					break;
				}
				i++;
			}
			Config.write("RecentWaveDirectory", fc.getCurrentDirectory().getPath());
			Config.pushFront("RecentAudioFiles", fc.getSelectedFile().getAbsolutePath());
			if (openedWave == null) {
				openAudioFile(f);
			} else {
				MainGUI nwin = new MainGUI(false);
				nwin.setVisible(true);
				nwin.openAudioFile(f);
			}
		}
    }//GEN-LAST:event_miOpenWaveActionPerformed

    private void miWAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miWAVEActionPerformed
//        RecognizerOptionsPanel rop = new RecognizerOptionsPanel();
//        JFrame jf = new JFrame("Opcje");
//        jf.getContentPane().add(rop);
//        rop.setBounds(20, 20, 400, 400);
//        jf.setBounds(20, 20, 400, 400);
//        jf.setVisible(true);
//        rop.setVisible(true);

		if (openedWave == null) {
			JOptionPane.showMessageDialog(this,
					"Nie wczytano jeszcze pliku d≈∫wiƒôkowego.",
					"Brak pliku d≈∫wiƒôkowego",
					JOptionPane.INFORMATION_MESSAGE);
			return;
		}

// To niepotrzebne bo waveFrame powinien byc dostepny juz od razu
//		if(wavePlayerFrame == null) {
//			wavePlayerFrame = new WavePlayer(openedWave);
//		}

		showWaveFrame();
    }//GEN-LAST:event_miWAVEActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
		AboutBox ab = new AboutBox(this, true);
		ab.setVisible(true);
    }//GEN-LAST:event_miAboutActionPerformed

	private void miNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNotesActionPerformed
		if (noteFrame == null) {
			noteFrame = new NoteFrame();
			desktopPane.add(noteFrame);
		}
		noteFrame.setNotes(notes);
		showNoteFrame();
		try {
			noteFrame.setSelected(true);
		} catch (PropertyVetoException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_miNotesActionPerformed

        private void miNewProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewProjectActionPerformed
			if (wizardFrame != null) {
				if (wizardFrame.isVisible()) {
					try {
						wizardFrame.setSelected(true);
					} catch (PropertyVetoException ex) {
						Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
					}
					return;
				} else {
					wizardFrame.dispose();
				}
			}

			miCloseProjectActionPerformed(null);

			wizardFrame = new WizardFrame();

			desktopPane.add(wizardFrame);
			wizardFrame.setVisible(true);
			try {
				wizardFrame.setSelected(true);
				projectProgressPane1.setWizardFrame(wizardFrame);
			} catch (PropertyVetoException ex) {
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			}

			projectSaved = false;
        }//GEN-LAST:event_miNewProjectActionPerformed

		private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
			if (startupFrame != null) {
				int x = (desktopPane.getWidth() - startupFrame.getWidth()) / 2;
				int y = (desktopPane.getHeight() - startupFrame.getHeight()) / 2;
				startupFrame.setLocation(x, y);
			}
		}//GEN-LAST:event_formComponentResized

		private void miSaveProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveProjectActionPerformed
			saveProject();
		}//GEN-LAST:event_miSaveProjectActionPerformed

	public void openAudioFile(final File f) {
		openAudioFile(f, null);
	}

	public void openAudioFile(final File f, final ProgressListener listener) {
		if (!f.exists()) {
			JOptionPane.showMessageDialog(this, "Taki plik nie istnieje!", "B≈ÇƒÖd", JOptionPane.ERROR_MESSAGE);
			return;
		}

//		wavePlayerFrame.setWave(null);

		final ProgressListener mainWindow = this;
		Runnable r = new Runnable() {

			@Override
			public void run() {
				try {
					Wave.create(f, (listener == null ? mainWindow : listener));
				} catch (FileDoesNotExistException ex) {
					JOptionPane.showMessageDialog(null, "Taki plik nie istnieje!", "B≈ÇƒÖd", JOptionPane.ERROR_MESSAGE);
				} catch (UnsupportedAudioFileException ex) {
					JOptionPane.showMessageDialog(null, "Nieobs≈Çugiwany format pliku!", "B≈ÇƒÖd", JOptionPane.ERROR_MESSAGE);
				} catch (Exception ex) {

					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		};

		Thread th = new Thread(r, "Audio Loading Thread");
		th.setDaemon(true);
		th.start();
	}

		private void miOpenProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenProjectActionPerformed
			// przygotowywanie okienka wyboru pliku
			JFileChooser fc = new JFileChooser();
			String[] s = Config.read("RecentProjectDirectory");
			if (!s[0].equals("0")) {
				fc.setCurrentDirectory(new File(s[0]));
			}

			fc.setFileFilter(new javax.swing.filechooser.FileFilter() {

				@Override
				public boolean accept(File f) {
					return f.getName().endsWith(".apr")
							|| f.isDirectory();
				}

				@Override
				public String getDescription() {
					return "Projekt IMARE (*.apr)";
				}
			});

			// wybieranie pliku
			switch (fc.showOpenDialog(this)) {
				case JFileChooser.CANCEL_OPTION:
					return;
			}
			File file = fc.getSelectedFile();

			// jesli plik nie istnieje to informujemy o tym uzytkownika
			// i wychodzimy z metody
			recentProjects = Config.read("RecentProjects");
			File f = fc.getSelectedFile();
			String[] rfl = Config.read("RecentItemsNumber");
			if (recentProjects.length > Integer.parseInt(rfl[0])) {
				Config.popBack("RecentProjects");
				recentProjects = Config.read("RecentProjects");
			}
			Config.removeValue("RecentProjects", f.getAbsolutePath());
			Config.write("RecentProjectDirectory", fc.getCurrentDirectory().getPath());
			Config.pushFront("RecentProjects", fc.getSelectedFile().getAbsolutePath());
			if (openedWave == null) {
				openProject(file);
			} else {
				new MainGUI(file).setVisible(projectSaved);
			}
			enableSaveButtons();
		}//GEN-LAST:event_miOpenProjectActionPerformed

		private void miCloseProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCloseProjectActionPerformed

			int result = JOptionPane.showConfirmDialog(this,
					"Czy na pewno chcesz zamknƒÖƒá projekt?",
					"Zamkniƒôcie projektu", JOptionPane.YES_NO_OPTION,
					JOptionPane.QUESTION_MESSAGE);

			switch (result) {
				case -1:
				case JOptionPane.NO_OPTION:
					return;
			}

			if (!projectSaved && getOpenedWave() != null) {

				result = JOptionPane.showConfirmDialog(this,
						"Projekt nie zosta≈Ç zapisany. Czy zapisaƒá go teraz?",
						"Zapis projektu", JOptionPane.YES_NO_OPTION,
						JOptionPane.QUESTION_MESSAGE);

				switch (result) {
					case -1:
					case JOptionPane.NO_OPTION:
						break;
//						return;

					case JOptionPane.YES_OPTION:
						miSaveProjectActionPerformed(null);
				}
			}

			projectSaved = true;

			setOpenedWave(null);
			setNotes(null);

			wavePlayerFrame.setVisible(false);
			noteFrame.setVisible(false);

//			for (Component c : desktopPane.getComponents()) {
//				if (c instanceof JInternalFrame) {
//					((JInternalFrame) c).hide();
//				}
//			}

			for (JInternalFrame f : desktopPane.getAllFrames()) {
				if (f instanceof RealtimeFrame) {
					f.dispose();
				} else {
					f.hide();
				}
			}

			layoutWindowsCascade();

			System.gc();
			disableSaveButtons();
			desktopPane.repaint();
		}//GEN-LAST:event_miCloseProjectActionPerformed

		private void miOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOptionsActionPerformed
			AppOptions ao = new AppOptions();
			desktopPane.add(ao);
			ao.setVisible(true);
		}//GEN-LAST:event_miOptionsActionPerformed

                private void mRecentItemsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mRecentItemsStateChanged
					mRecentItems.removeAll();
					recentAudioFiles = Config.read("RecentAudioFiles");
					//----------------------------------------------
					// TODO: bb - poprawic trzeba (morti)
					// TU MI TE≈ª WYWALA wyjƒÖtek
					// java.lang.ArrayIndexOutOfBoundsException: 0
					if (recentAudioFiles[0].equals("0")) {
						//--------------------------------------pieterer
						Config.write("RecentAudioFiles", "(puste)");
						recentAudioFiles = Config.read("RecentAudioFiles");
					} else {
						if (recentAudioFiles.length > 1) {
							Config.removeValue("RecentAudioFiles", "(puste)");
							recentAudioFiles = Config.read("RecentAudioFiles");
						}
					}
					int i = 0, recentCount;
					String[] t = Config.read("RecentItemsNumber");
					recentCount = Integer.parseInt(t[0]);
					for (final String s : recentAudioFiles) {
						i++;
						if (i > recentCount) {
							Config.popBack("RecentAudioFiles");
						} else {
							JMenuItem jmi = new JMenuItem();
							String ss = s.replace("\\", "/");
							int slash = ss.lastIndexOf("/");
							if (slash > 0) {
								ss = "..." + ss.substring(slash);
							}
							jmi.setText(ss);
							jmi.setVisible(true);
							if (s.equals("(puste)")) {
								jmi.setEnabled(false);
							} else {
								jmi.addActionListener(new ActionListener() {

									@Override
									public void actionPerformed(ActionEvent e) {
										Config.removeValue("RecentAudioFiles", s);
										Config.pushFront("RecentAudioFiles", s);
										if (openedWave == null) {
											openAudioFile(new File(s));
										} else {
											MainGUI nwin = new MainGUI(false);
											nwin.setVisible(true);
											nwin.openAudioFile(new File(s));
										}
									}
								});
							}
							mRecentItems.add(jmi);
						}
					}
                }//GEN-LAST:event_mRecentItemsStateChanged

				private void miRecognitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRecognitionActionPerformed
					recoFrame.setVisible(true);
					try {
						recoFrame.setSelected(true);
					} catch (PropertyVetoException ex) {
					}
				}//GEN-LAST:event_miRecognitionActionPerformed

                                private void toolsMenuStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_toolsMenuStateChanged
									miRecognition.setEnabled(openedWave != null);

                                }//GEN-LAST:event_toolsMenuStateChanged

                                private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
									miNewProjectActionPerformed(evt);
}//GEN-LAST:event_btnNewActionPerformed

                                private void btnOpenProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenProjectActionPerformed
									miOpenProjectActionPerformed(evt);
                                }//GEN-LAST:event_btnOpenProjectActionPerformed

                                private void btnSaveProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveProjectActionPerformed
									miSaveProjectActionPerformed(evt);
                                }//GEN-LAST:event_btnSaveProjectActionPerformed

                                private void btnPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreferencesActionPerformed
									miOptionsActionPerformed(evt);
                                }//GEN-LAST:event_btnPreferencesActionPerformed

                                private void btnAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAboutActionPerformed
									miAboutActionPerformed(evt);
                                }//GEN-LAST:event_btnAboutActionPerformed

                                private void mRecentProjectsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mRecentProjectsStateChanged
									mRecentProjects.removeAll();
									recentProjects = Config.read("RecentProjects");

									//----------------------------------------------
									// TU MI WYWALA wyjƒÖtek
									// java.lang.ArrayIndexOutOfBoundsException: 0
									if (recentProjects[0].equals("0")) {
										// niech kto≈õ to wreszcie naprawi
										//--------------------------------------pieterer
										Config.write("RecentProjects", "(puste)");
										recentProjects = Config.read("RecentProjects");
									} else {
										if (recentProjects.length > 1) {
											Config.removeValue("RecentProjects", "(puste)");
											recentProjects = Config.read("RecentProjects");
										}
									}
									int i = 0, recentCount;
									String[] t = Config.read("RecentItemsNumber");
									recentCount = Integer.parseInt(t[0]);
									for (final String s : recentProjects) {
										i++;
										if (i > recentCount) {
											Config.popBack("RecentProjects");
										} else {
											JMenuItem jmi = new JMenuItem();
											String ss = s.replace("\\", "/");
											int slash = ss.lastIndexOf("/");
											if (slash > 0) {
												ss = "..." + ss.substring(slash);
											}
											jmi.setText(ss);
											jmi.setVisible(true);
											if (s.equals("(puste)")) {
												jmi.setEnabled(false);
											} else {
												jmi.addActionListener(new ActionListener() {

													@Override
													public void actionPerformed(ActionEvent e) {
														Config.removeValue("RecentProjects", s);
														Config.pushFront("RecentProjects", s);
														openProject(new File(s));
													}
												});
											}
											mRecentProjects.add(jmi);
										}
									}
                                }//GEN-LAST:event_mRecentProjectsStateChanged

								private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
									// zamykanie wszystkich okien wewnƒôtrznych
									for (Component c : desktopPane.getComponents()) {
										if (c instanceof JInternalFrame) {
											((JInternalFrame) c).dispose();
										}
									}
								}//GEN-LAST:event_formWindowClosed

                                                                private void miExportToMIDIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExportToMIDIActionPerformed
																	if ((noteFrame != null) && (notes != null)) {
																		noteFrame.exportMidi();
																	}
                                                                }//GEN-LAST:event_miExportToMIDIActionPerformed

                                                                private void miLilypondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLilypondActionPerformed
																	if (notes != null) {
																		JFileChooser fc = new JFileChooser();
																		fc.setFileFilter(new javax.swing.filechooser.FileFilter() {

																			@Override
																			public boolean accept(File f) {
																				return f.getName().endsWith(".ly") || f.isDirectory();
																			}

																			@Override
																			public String getDescription() {
																				return "Plik LilyPond (*.ly)";
																			}
																		});
																		switch (fc.showSaveDialog(this)) {
																			case JFileChooser.CANCEL_OPTION:
																				return;
																		}
																		File file = fc.getSelectedFile();

																		if (!file.getName().endsWith(".ly")) {
																			file = new File(file.getAbsolutePath() + ".ly");
																		}
																		if (file.exists()) {
																			if (JOptionPane.showConfirmDialog(this,
																					"Czy nadpisaƒá istniejƒÖcy plik?") == JOptionPane.NO_OPTION) {
																				return;
																			}
																		}
																		LilySong l = new LilySong();
																		l.fromNotes(notes);
																		try {
																			l.write(file);
																		} catch (IOException ex) {
																			//Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
																			JOptionPane.showMessageDialog(null, "Nie mo≈ºna utworzyƒá pliku", "Nie mo≈ºna utworzyƒá pliku", JOptionPane.ERROR_MESSAGE);
																		}
																	}
                                                                }//GEN-LAST:event_miLilypondActionPerformed

																private void miLayoutVerticallyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLayoutVerticallyActionPerformed
																	layoutWindowsVertically();
																}//GEN-LAST:event_miLayoutVerticallyActionPerformed

																private void miLayoutHorizontallyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLayoutHorizontallyActionPerformed
																	layoutWindowsHorizontally();
																}//GEN-LAST:event_miLayoutHorizontallyActionPerformed

																private void miLayoutCascadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLayoutCascadeActionPerformed
																	layoutWindowsCascade();
																}//GEN-LAST:event_miLayoutCascadeActionPerformed

																private void miExportToPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExportToPDFActionPerformed
																	if (noteFrame != null) {
																		ProgressFrame prog = new ProgressFrame("Trwa eksportowanie...", null);
																		addFrame(prog, false);
																		noteFrame.exportPDF(prog);
																	}
																}//GEN-LAST:event_miExportToPDFActionPerformed

																private void miRealTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRealTimeActionPerformed
																	addFrame(new RealtimeFrame(), true);
																}//GEN-LAST:event_miRealTimeActionPerformed

	private void openProject(File file) {
		if (!file.exists()) {
			JOptionPane.showMessageDialog(this, "Taki plik nie istnieje!");
			return;
		}

		// wczytujemy dane z pliku
		ObjectInputStream in = null;
		try {
			in = new ObjectInputStream(new FileInputStream(file));
			File waveFile = new File(in.readUTF());
			ProjectData projectData = (ProjectData) in.readObject();
			StaveData loadedNotes = (StaveData) in.readObject();

			if (waveFile.exists()) {
				setNotes(loadedNotes);

				applyProjectData(projectData);

				showWaveFrame();
				if (loadedNotes != null) {
					showNoteFrame();
				}
//				if(noteFrame.getLocation().equals(wavePlayerFrame.getLocation())) {
				layoutWindowsVertically();
//				}

				openAudioFile(waveFile);
			}
		} catch (ClassNotFoundException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		} finally {
			if (in != null) {
				try {
					in.close();
				} catch (IOException ex) {
					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
			projectSaved = true;
			enableSaveButtons();
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		UIManager.put("OptionPane.yesButtonText", "Tak");
		UIManager.put("OptionPane.noButtonText", "Nie");
		UIManager.put("OptionPane.cancelButtonText", "Anuluj");

		UIManager.put("FileChooser.saveButtonText", "Zapisz");
		UIManager.put("FileChooser.openButtonText", "Otw√≥rz");
		UIManager.put("FileChooser.cancelButtonText", "Anuluj");
		UIManager.put("FileChooser.saveDialogTitleText", "Zapisywanie...");
		UIManager.put("FileChooser.openDialogTitleText", "Otwieranie...");

		try {
			Config.init();
		} catch (IOException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
//
//		try {
//			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//		} catch (UnsupportedLookAndFeelException ex) {
//			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//		} catch (ClassNotFoundException ex) {
//			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//		} catch (InstantiationException ex) {
//			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//		} catch (IllegalAccessException ex) {
//			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//		}


		try {
			UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
//            SwingUtilities.updateComponentTreeUI(gui);
		} catch (ClassNotFoundException ex) {
//			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (UnsupportedLookAndFeelException ex) {
//			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}

		MainGUI gui = new MainGUI(true);

		gui.setVisible(true);
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbout;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnOpenProject;
    private javax.swing.JButton btnPreferences;
    private javax.swing.JButton btnSaveProject;
    private javax.swing.JButton btnSaveProjectAs;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenu mRecentItems;
    private javax.swing.JMenu mRecentProjects;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miClose;
    private javax.swing.JMenuItem miCloseProject;
    private javax.swing.JMenu miExport;
    private javax.swing.JMenuItem miExportToMIDI;
    private javax.swing.JMenuItem miExportToPDF;
    private javax.swing.JMenuItem miLayoutCascade;
    private javax.swing.JMenuItem miLayoutHorizontally;
    private javax.swing.JMenuItem miLayoutVertically;
    private javax.swing.JMenuItem miLilypond;
    private javax.swing.JMenuItem miNewProject;
    private javax.swing.JMenuItem miNotes;
    private javax.swing.JMenuItem miOpenProject;
    private javax.swing.JMenuItem miOpenWave;
    private javax.swing.JMenuItem miOptions;
    private javax.swing.JMenuItem miRealTime;
    private javax.swing.JMenuItem miRecognition;
    private javax.swing.JMenuItem miSaveProject;
    private javax.swing.JMenuItem miWAVE;
    private javax.swing.JMenu toolsMenu;
    // End of variables declaration//GEN-END:variables

	/**
	 * Zwraca nutki zapisane w tym oknie.
	 */
	public StaveData getNotes() {
		return notes;
	}

	/**
	 * Ustawia nuty zapamiƒôtane w oknie.
	 * @param notes
	 */
	public void setNotes(StaveData notes) {
		miNotes.setEnabled(notes != null);
		this.notes = notes;
		noteFrame.setNotes(notes);

		projectSaved = false;
		enableSaveButtons();
	}

	/**
	 * Zwraca otwarty plik audio
	 */
	public Wave getOpenedWave() {
		return openedWave;
	}

	/**
	 * Ustawia otwarty plik audio
	 * @param openedWave
	 */
	public void setOpenedWave(Wave openedWave) {
		miWAVE.setEnabled(openedWave != null);
		this.openedWave = openedWave;
		if (openedWave == null) {
			setTitle("IMARE");
		} else {
			setTitle("IMARE - " + openedWave.getFile().getName());
		}

		if (wavePlayerFrame != null) {
			wavePlayerFrame.setWave(openedWave);
		}

		projectSaved = false;
		enableSaveButtons();
	}

	/**
	 * Wysy≈Ça do okien-dzieci informacjƒô o fakcie zamykania okna g≈Ç√≥wnego.
	 */
	@Override
	public void dispose() {
		super.dispose();
		if (wavePlayerFrame != null) {
			wavePlayerFrame.dispose();
		}
		if (noteFrame != null) {
			noteFrame.dispose();
		}

		wavePlayerFrame = null;
		noteFrame = null;


	}

	/**
	 * Ustawia dla okien ich zapisane pozycje i wielko≈õci.
	 * Stosowane po za≈Çadowaniu projektu z pliku.
	 * @param projectData
	 */
	private void applyProjectData(ProjectData projectData) {
		projectData.getWaveFrame().apply(wavePlayerFrame);
		projectData.getNoteFrame().apply(noteFrame);
		projectData.getRecoFrame().apply(recoFrame);
	}

	/**
	 * Wy≈õwietla okno z nutami
	 */
	public void showNoteFrame() {
		noteFrame.setVisible(true);
		try {
			noteFrame.setSelected(true);
		} catch (PropertyVetoException ex) {
		}
	}

	/**
	 * Wy≈õwietla okno z wavem
	 */
	public void showWaveFrame() {
		wavePlayerFrame.setVisible(true);
		try {
			wavePlayerFrame.setSelected(true);
		} catch (PropertyVetoException ex) {
		}
	}

	/**
	 * Pokazuje panel postƒôpu w projekcie.
	 * @param show
	 */
	public void showProjectPane(boolean show) {
		projectProgressPane1.setVisible(show);
	}

	/**
	 * Pokazuje okienko otwierania pliku WAVE i
	 * potem ≈Çaduje go do pamiƒôci.
	 */
//	public void openWaveFile(boolean openAfterLoad) {
//		JFileChooser fc = new JFileChooser();
//		fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
//
//			@Override
//			public boolean accept(File f) {
//				return f.getName().endsWith(".wav")
//						|| f.getName().endsWith(".mp3")
//						|| f.isDirectory();
//			}
//
//			@Override
//			public String getDescription() {
//				return "Obs≈Çugiwane formaty (*.wav, *.mp3)";
//			}
//		});
//
//		String[] s = Config.read("RecentWaveDirectory");
//		if (!s[0].equals("0")) {
//			fc.setCurrentDirectory(new File(s[0]));
//		}
//
//		int res = fc.showOpenDialog(this);
//		if (res == JFileChooser.APPROVE_OPTION) {
//			final File f = fc.getSelectedFile();
//			Config.write("RecentWaveDirectory", fc.getCurrentDirectory().getPath());
//			try {
//				final ProgressFrame pf = new ProgressFrame(this);
//				if (openedWave == null) {
//					addFrame(pf, true);
//
//
//					Runnable r = new Runnable() {
//
//						@Override
//						public void run() {
//							try {
//								Wave wave = Wave.create(f, pf);
//								setOpenedWave(wave);
//							} catch (FileDoesNotExistException ex) {
//								Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//							} catch (UnsupportedAudioFileException ex) {
//								Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//							} catch (IOException ex) {
//								Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//							}
//						}
//					};
//					try {
//						//					setOpenedWave(wave);
//						this.wait();
//					} catch (InterruptedException ex) {
//						Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//					}
//
//					if (openAfterLoad) {
//						showWaveFrame();
//					}
//				} else {
//					Wave justOpened = Wave.create(f, pf);
//					MainGUI newMain = new MainGUI(justOpened, null);
//					newMain.addFrame(pf, true);
//					newMain.setVisible(true);
//				}
//			} catch (FileDoesNotExistException ex) {
//				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//			} catch (UnsupportedAudioFileException ex) {
//				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//			} catch (IOException ex) {
//				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
//			}
//			enableSaveButtons();
//		}
//	}
	public NoteFrame getNoteFrame() {
		return noteFrame;
	}

	public WavePlayer getWavePlayerFrame() {
		return wavePlayerFrame;
	}

	public RecognizeFrame getRecognizeFrame() {
		return recoFrame;
	}

	public boolean saveProject() {
		// jesli nie ma co zapisywac to wychodzimy
		if (openedWave == null) {
			return false;
		}

		// przygotowywanie okienka wybierania pliku
		JFileChooser fc = new JFileChooser();
		fc.setFileFilter(new javax.swing.filechooser.FileFilter() {

			@Override
			public boolean accept(File f) {
				return f.getName().endsWith(".apr")
						|| f.isDirectory();
			}

			@Override
			public String getDescription() {
				return "Projekt IMARE (*.apr)";
			}
		});

		// wybieranie pliku do zapisu
		switch (fc.showSaveDialog(this)) {
			case JFileChooser.CANCEL_OPTION:
				return false;
		}
		File file = fc.getSelectedFile();

		// jesli plik nie konczy sie rozszerzeniem .apr to
		// dodajemy je od siebie
		if (!file.getName().endsWith(".apr")) {
			file = new File(file.getAbsolutePath() + ".apr");
		}

		// jesli plik istnieje to pytamy czy go nadpisac
		if (file.exists()) {
			if (JOptionPane.showConfirmDialog(this,
					"Czy nadpisaƒá istniejƒÖcy plik?") == JOptionPane.NO_OPTION) {
				return false;
			}
		}


		// zapisujemy dane do pliku
		ObjectOutputStream out = null;
		try {
			ProjectData projectData = new ProjectData();
			projectData.setNoteFrame(new FrameInfo(noteFrame));
			projectData.setWaveFrame(new FrameInfo(wavePlayerFrame));
			projectData.setRecoFrame(new FrameInfo(recoFrame));

			out = new ObjectOutputStream(new FileOutputStream(file));
			out.writeUTF(openedWave.getFile().getAbsolutePath());
			out.writeObject(projectData);
			out.writeObject(notes);

		} catch (FileNotFoundException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		} finally {
			if (out != null) {
				try {
					out.close();
				} catch (IOException ex) {
					Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
			Config.write("RecentProjectDirectory", fc.getCurrentDirectory().getAbsolutePath());
			Config.removeValue("RecentProjects", file.getAbsolutePath());
			Config.pushFront("RecentProjects", file.getAbsolutePath());
			projectSaved = true;
			return true;
		}

	}

	public void layoutWindowsVertically() {

		ArrayList<JInternalFrame> frameList = new ArrayList<JInternalFrame>();
		for (JInternalFrame f : desktopPane.getAllFrames()) {
			if (f.isVisible() && !(f instanceof ProgressFrame || f instanceof RecognitionProgress)) {
				frameList.add(f);
			}
		}

		if (frameList.size() == 0) {
			return;
		}

		int size = desktopPane.getHeight() / frameList.size();

		for (int i = 0; i < frameList.size(); i++) {
			JInternalFrame frame = frameList.get(i);

			if (frame == null) {
				continue;
			}
			frame.setBounds(0, i * size, desktopPane.getWidth(), size);
		}
	}

	public void layoutWindowsHorizontally() {

		ArrayList<JInternalFrame> frameList = new ArrayList<JInternalFrame>();
		for (JInternalFrame f : desktopPane.getAllFrames()) {
			if (f.isVisible() && !(f instanceof ProgressFrame || f instanceof RecognitionProgress)) {
				frameList.add(f);
			}
		}

		if (frameList.size() == 0) {
			return;
		}

		int size = desktopPane.getWidth() / frameList.size();

		for (int i = 0; i < frameList.size(); i++) {
			JInternalFrame frame = frameList.get(i);

			if (frame == null) {
				continue;
			}
			frame.setBounds(i * size, 0, size, desktopPane.getHeight());
		}
	}

	public void layoutWindowsCascade() {
		ArrayList<JInternalFrame> frameList = new ArrayList<JInternalFrame>();
		for (JInternalFrame f : desktopPane.getAllFrames()) {
			if (f.isVisible() && !(f instanceof ProgressFrame || f instanceof RecognitionProgress)) {
				frameList.add(f);
			}
		}

		if (frameList.size() == 0) {
			return;
		}

		int step = 50;
		int h = desktopPane.getHeight() - frameList.size() * step;
		int w = desktopPane.getWidth() - frameList.size() * step;
		for (int i = 0; i < frameList.size(); i++) {
			JInternalFrame frame = frameList.get(i);
			Dimension s = frame.getPreferredSize();
			frame.setLocation(step * i, step * i);
			frame.setSize(w, h);
			try {
				frame.setSelected(true);
			} catch (PropertyVetoException ex) {
				Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
	}

	public void addFrame(JInternalFrame frame, boolean showAfterAdd) {
		if (frame instanceof WizardFrame) {
			projectProgressPane1.setWizardFrame((WizardFrame) frame);
		}

		desktopPane.add(frame);
		frame.setVisible(showAfterAdd);

	}

	public void openProjectClicked() {
		miOpenProjectActionPerformed(null);
	}

	@Override
	public void jobStarted(Object sender) {
		progressFrame = new ProgressFrame("Wczytywanie pliku audio...", null);
		addFrame(progressFrame, true);
		progressFrame.jobStarted(sender);
		try {
			progressFrame.setSelected(true);
		} catch (PropertyVetoException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}

	}

	@Override
	public void jobProgress(Object sender, float progress) {
		progressFrame.jobProgress(sender, progress);

		try {
			progressFrame.setSelected(true);
		} catch (PropertyVetoException ex) {
			Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	@Override
	public void jobFinished(Object sender) {
		if (!isDisplayable()) {
			return;
		}
		progressFrame.jobFinished(sender);

		setOpenedWave((Wave) sender);

		boolean wizard = false;
		for (JInternalFrame f : desktopPane.getAllFrames()) {
			if ((f instanceof WizardFrame) && f.isVisible()) {
				wizard = true;
			}
		}

		if (!wizard) {
			showWaveFrame();
		}

		enableSaveButtons();

		progressFrame = null;
	}
}
