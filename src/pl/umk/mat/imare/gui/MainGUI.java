/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainGUI.java
 *
 * Created on 2010-02-10, 15:30:43
 */
package pl.umk.mat.imare.gui;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.io.*;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import pl.umk.mat.imare.io.Config;
import pl.umk.mat.imare.io.ProgressListener;
import pl.umk.mat.imare.io.Wave;
import pl.umk.mat.imare.reco.Recognizer;

/**
 *
 * @author Bartek
 */
public class MainGUI extends javax.swing.JFrame {

  private static RecognizerOptionsFrame options = null;
  private String[] recentAudioFiles = null;
  private RealtimeFrame realtime = null;
  private final AboutBox about;

  public static Recognizer getRecognizer(Wave wave, int iStart, int iEnd) {
    return options.panel.getRecognizer(wave, iStart, iEnd);
  }

  /** Creates new form MainGUI */
  public MainGUI() {
    initComponents();
    about = new AboutBox(this,false);

    if (options == null) {
      options = new RecognizerOptionsFrame();
      addFrame(options,false);
    }

    try {
      setIconImage(ImageIO.read(getClass().getResource("/pl/umk/mat/imare/gui/gfx/imare.PNG")));
    } catch (IOException ex) {
      displayError(ex);
    }
  }

  public static void displayError(Exception ex, Component parent) {
    JOptionPane.showMessageDialog(parent, ex, "Błąd", JOptionPane.ERROR_MESSAGE);
  }

  public static void displayError(Exception ex) {
    displayError(ex, null);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jToolBar1 = new javax.swing.JToolBar();
    btnOpenWave = new javax.swing.JButton();
    btnPreferences = new javax.swing.JButton();
    btnAbout = new javax.swing.JButton();
    desktopPane = new javax.swing.JDesktopPane();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    miOpenWave = new javax.swing.JMenuItem();
    mRecentItems = new javax.swing.JMenu();
    miRealTime = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    miClose = new javax.swing.JMenuItem();
    jMenu1 = new javax.swing.JMenu();
    miRecognition = new javax.swing.JMenuItem();
    jSeparator2 = new javax.swing.JPopupMenu.Separator();
    miLayoutVertically = new javax.swing.JMenuItem();
    miLayoutHorizontally = new javax.swing.JMenuItem();
    miLayoutCascade = new javax.swing.JMenuItem();
    helpMenu = new javax.swing.JMenu();
    miAbout = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("IMARE Lite");
    setLocationByPlatform(true);
    getContentPane().setLayout(new java.awt.GridBagLayout());

    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);
    jToolBar1.setPreferredSize(new java.awt.Dimension(2, 29));

    btnOpenWave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/open.png"))); // NOI18N
    btnOpenWave.setToolTipText("Otwórz projekt");
    btnOpenWave.setFocusable(false);
    btnOpenWave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnOpenWave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnOpenWave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnOpenWaveActionPerformed(evt);
      }
    });
    jToolBar1.add(btnOpenWave);

    btnPreferences.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/configure.png"))); // NOI18N
    btnPreferences.setToolTipText("Preferencje...");
    btnPreferences.setFocusable(false);
    btnPreferences.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnPreferences.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnPreferences.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnPreferencesActionPerformed(evt);
      }
    });
    jToolBar1.add(btnPreferences);

    btnAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/umk/mat/imare/gui/gfx/help.png"))); // NOI18N
    btnAbout.setToolTipText("O programie...");
    btnAbout.setFocusable(false);
    btnAbout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnAbout.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnAbout.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnAboutActionPerformed(evt);
      }
    });
    jToolBar1.add(btnAbout);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    getContentPane().add(jToolBar1, gridBagConstraints);

    desktopPane.setBackground(java.awt.SystemColor.controlShadow);
    desktopPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    desktopPane.setDoubleBuffered(true);
    desktopPane.setPreferredSize(null);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(desktopPane, gridBagConstraints);

    fileMenu.setText("Projekt");

    miOpenWave.setText("Otwórz plik audio");
    miOpenWave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        miOpenWaveActionPerformed(evt);
      }
    });
    fileMenu.add(miOpenWave);

    mRecentItems.setText("Ostatnio otwierane");
    mRecentItems.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        mRecentItemsStateChanged(evt);
      }
    });
    fileMenu.add(mRecentItems);

    miRealTime.setText("Rozpoznawaj ze źródła");
    miRealTime.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        miRealTimeActionPerformed(evt);
      }
    });
    fileMenu.add(miRealTime);
    fileMenu.add(jSeparator1);

    miClose.setText("Zamknij");
    miClose.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        miCloseActionPerformed(evt);
      }
    });
    fileMenu.add(miClose);

    menuBar.add(fileMenu);

    jMenu1.setText("Okna");

    miRecognition.setText("Ustawienia transkrypcji...");
    miRecognition.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        miRecognitionActionPerformed(evt);
      }
    });
    jMenu1.add(miRecognition);
    jMenu1.add(jSeparator2);

    miLayoutVertically.setText("Ułóż pionowo");
    miLayoutVertically.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        miLayoutVerticallyActionPerformed(evt);
      }
    });
    jMenu1.add(miLayoutVertically);

    miLayoutHorizontally.setText("Ułóż poziomo");
    miLayoutHorizontally.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        miLayoutHorizontallyActionPerformed(evt);
      }
    });
    jMenu1.add(miLayoutHorizontally);

    miLayoutCascade.setText("Ułóż kaskadowo");
    miLayoutCascade.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        miLayoutCascadeActionPerformed(evt);
      }
    });
    jMenu1.add(miLayoutCascade);

    menuBar.add(jMenu1);

    helpMenu.setText("Informacje");

    miAbout.setText("O programie...");
    miAbout.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        miAboutActionPerformed(evt);
      }
    });
    helpMenu.add(miAbout);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    setBounds((screenSize.width-686)/2, (screenSize.height-531)/2, 686, 531);
  }// </editor-fold>//GEN-END:initComponents

    private void miCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCloseActionPerformed
      dispose();
    }//GEN-LAST:event_miCloseActionPerformed

    private void miOpenWaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenWaveActionPerformed
      JFileChooser fc = new JFileChooser();
      fc.setFileFilter(new javax.swing.filechooser.FileFilter() {

        @Override
        public boolean accept(File f) {
          return f.getName().endsWith(".wav")
                  || f.getName().endsWith(".mp3")
                  || f.isDirectory();
        }

        @Override
        public String getDescription() {
          return "Obsługiwane formaty (*.wav, *.mp3)";
        }
      });
      String[] s = Config.read("RecentWaveDirectory");
      if (!s[0].equals("0")) {
        fc.setCurrentDirectory(new File(s[0]));
      }
      int res = fc.showOpenDialog(this);
      if (res == JFileChooser.APPROVE_OPTION) {
        recentAudioFiles = Config.read("RecentAudioFiles");
        File f = fc.getSelectedFile();
        int i = 0;
        String[] rfl = Config.read("RecentItemsNumber");
        if (recentAudioFiles.length > Integer.parseInt(rfl[0])) {
          Config.popBack("RecentAudioFiles");
          recentAudioFiles = Config.read("RecentAudioFiles");
        }
        for (String ss : recentAudioFiles) {
          if (ss.equals(f.getAbsolutePath())) {
            Config.removeAt("RecentAudioFiles", i);
            break;
          }
          i++;
        }
        Config.write("RecentWaveDirectory", fc.getCurrentDirectory().getPath());
        Config.pushFront("RecentAudioFiles", fc.getSelectedFile().getAbsolutePath());
        openAudioFile(f);
      }
    }//GEN-LAST:event_miOpenWaveActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
      about.setVisible(true);
    }//GEN-LAST:event_miAboutActionPerformed

  private void openAudioFile(final File file) {

    final ProgressThreadFrame frame = new ProgressThreadFrame() {

      Wave wave = null;
      ProgressListener pl = new ProgressListener() {

        @Override
        public void jobStarted(Object o) {
        }

        @Override
        public void jobProgress(Object o, float f) {
          setProgress(f);
        }

        @Override
        public void jobFinished(Object o) {
        }

        @Override
        public void jobFailed(Object o, String string) {
        }
      };

      @Override
      protected void work() throws Exception {
        wave = Wave.create(file, pl);
      }

      @Override
      protected void after() {
        WavePlayer wp = new WavePlayer(wave);
        desktopPane.add(wp);
        wp.setVisible(true);
      }
    };

    addFrame(frame);
    frame.startThread();
  }

                private void mRecentItemsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mRecentItemsStateChanged
                  mRecentItems.removeAll();
                  recentAudioFiles = Config.read("RecentAudioFiles");
                  if (recentAudioFiles[0].equals("0")) {
                    Config.write("RecentAudioFiles", "(puste)");
                    recentAudioFiles = Config.read("RecentAudioFiles");
                  } else {
                    if (recentAudioFiles.length > 1) {
                      Config.removeValue("RecentAudioFiles", "(puste)");
                      recentAudioFiles = Config.read("RecentAudioFiles");
                    }
                  }
                  int i = 0, recentCount;
                  String[] t = Config.read("RecentItemsNumber");
                  recentCount = Integer.parseInt(t[0]);
                  for (final String s : recentAudioFiles) {
                    i++;
                    if (i > recentCount) {
                      Config.popBack("RecentAudioFiles");
                    } else {
                      JMenuItem jmi = new JMenuItem();
                      String ss = s.replace("\\", "/");
                      int slash = ss.lastIndexOf("/");
                      if (slash > 0) {
                        ss = "..." + ss.substring(slash);
                      }
                      jmi.setText(ss);
                      jmi.setVisible(true);
                      if (s.equals("(puste)")) {
                        jmi.setEnabled(false);
                      } else {
                        jmi.addActionListener(new ActionListener() {

                          @Override
                          public void actionPerformed(ActionEvent e) {
                            Config.removeValue("RecentAudioFiles", s);
                            Config.pushFront("RecentAudioFiles", s);
                            openAudioFile(new File(s));
                          }
                        });
                      }
                      mRecentItems.add(jmi);
                    }
                  }
                }//GEN-LAST:event_mRecentItemsStateChanged

				private void miRecognitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRecognitionActionPerformed
          options.setVisible(true);
          try {
            options.setSelected(true);
          } catch (PropertyVetoException ex) {
          }
				}//GEN-LAST:event_miRecognitionActionPerformed

                                private void btnOpenWaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenWaveActionPerformed
                                  miOpenWaveActionPerformed(evt);
                                }//GEN-LAST:event_btnOpenWaveActionPerformed

                                private void btnPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreferencesActionPerformed
                                  miRecognitionActionPerformed(evt);
                                }//GEN-LAST:event_btnPreferencesActionPerformed

                                private void btnAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAboutActionPerformed
                                  miAboutActionPerformed(evt);
                                }//GEN-LAST:event_btnAboutActionPerformed

																private void miLayoutVerticallyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLayoutVerticallyActionPerformed
                                  layoutWindowsVertically();
																}//GEN-LAST:event_miLayoutVerticallyActionPerformed

																private void miLayoutHorizontallyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLayoutHorizontallyActionPerformed
                                  layoutWindowsHorizontally();
																}//GEN-LAST:event_miLayoutHorizontallyActionPerformed

																private void miLayoutCascadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLayoutCascadeActionPerformed
                                  layoutWindowsCascade();
																}//GEN-LAST:event_miLayoutCascadeActionPerformed

																private void miRealTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRealTimeActionPerformed

                                  if (realtime != null) {
                                    try {
                                      realtime.setSelected(true);
                                    } catch (PropertyVetoException ex) {
                                    }
                                  } else {
                                    realtime = new RealtimeFrame();
                                    realtime.setWindowCloseListener(new ActionListener() {

                                      @Override
                                      public void actionPerformed(ActionEvent e) {
                                        realtime = null;
                                      }
                                    });
                                    addFrame(realtime);
                                  }
																}//GEN-LAST:event_miRealTimeActionPerformed

  /**
   * IMARE starting...
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    UIManager.put("OptionPane.yesButtonText", "Tak");
    UIManager.put("OptionPane.noButtonText", "Nie");
    UIManager.put("OptionPane.cancelButtonText", "Anuluj");

    UIManager.put("FileChooser.saveButtonText", "Zapisz");
    UIManager.put("FileChooser.openButtonText", "Otwórz");
    UIManager.put("FileChooser.cancelButtonText", "Anuluj");
    UIManager.put("FileChooser.saveDialogTitleText", "Zapisywanie...");
    UIManager.put("FileChooser.openDialogTitleText", "Otwieranie...");

    try {
      Config.init();
    } catch (IOException ex) {
      displayError(ex);
    }

    try {
      UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
    } catch (ClassNotFoundException ex) {
    } catch (UnsupportedLookAndFeelException ex) {
    } catch (Exception ex) {
      displayError(ex);
    }

    MainGUI gui = new MainGUI();
    gui.setVisible(true);
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnAbout;
  private javax.swing.JButton btnOpenWave;
  private javax.swing.JButton btnPreferences;
  private javax.swing.JDesktopPane desktopPane;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JPopupMenu.Separator jSeparator2;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JMenu mRecentItems;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JMenuItem miAbout;
  private javax.swing.JMenuItem miClose;
  private javax.swing.JMenuItem miLayoutCascade;
  private javax.swing.JMenuItem miLayoutHorizontally;
  private javax.swing.JMenuItem miLayoutVertically;
  private javax.swing.JMenuItem miOpenWave;
  private javax.swing.JMenuItem miRealTime;
  private javax.swing.JMenuItem miRecognition;
  // End of variables declaration//GEN-END:variables

  public void layoutWindowsVertically() {

    ArrayList<JInternalFrame> frameList = new ArrayList<JInternalFrame>();
    for (JInternalFrame f : desktopPane.getAllFrames()) {
      if (f.isVisible() && (f instanceof WavePlayer || f instanceof NoteFrame)) {
        frameList.add(f);
      }
    }

    if (frameList.isEmpty()) {
      return;
    }

    int size = desktopPane.getHeight() / frameList.size();

    for (int i = 0; i < frameList.size(); i++) {
      JInternalFrame frame = frameList.get(i);

      if (frame == null) {
        continue;
      }
      frame.setBounds(0, i * size, desktopPane.getWidth(), size);
    }
  }

  public void layoutWindowsHorizontally() {

    ArrayList<JInternalFrame> frameList = new ArrayList<JInternalFrame>();
    for (JInternalFrame f : desktopPane.getAllFrames()) {
      if (f.isVisible() && (f instanceof WavePlayer || f instanceof NoteFrame)) {
        frameList.add(f);
      }
    }

    if (frameList.isEmpty()) {
      return;
    }

    int size = desktopPane.getWidth() / frameList.size();

    for (int i = 0; i < frameList.size(); i++) {
      JInternalFrame frame = frameList.get(i);

      if (frame == null) {
        continue;
      }
      frame.setBounds(i * size, 0, size, desktopPane.getHeight());
    }
  }

  public void layoutWindowsCascade() {
    ArrayList<JInternalFrame> frameList = new ArrayList<JInternalFrame>();
    for (JInternalFrame f : desktopPane.getAllFrames()) {
      if (f.isVisible() && (f instanceof WavePlayer || f instanceof NoteFrame)) {
        frameList.add(f);
      }
    }

    if (frameList.isEmpty()) {
      return;
    }

    int step = 50;
    int h = desktopPane.getHeight() - frameList.size() * step;
    int w = desktopPane.getWidth() - frameList.size() * step;
    for (int i = 0; i < frameList.size(); i++) {
      JInternalFrame frame = frameList.get(i);
      Dimension s = frame.getPreferredSize();
      frame.setLocation(step * i, step * i);
      frame.setSize(w, h);
      try {
        frame.setSelected(true);
      } catch (PropertyVetoException ex) {
      }
    }
  }

  public final void addFrame(JInternalFrame frame) {
    addFrame(frame, true);
  }

  public final void addFrame(JInternalFrame frame, boolean showAfterAdd) {
    desktopPane.add(frame);
    validate();
    frame.setVisible(showAfterAdd);
  }
}
