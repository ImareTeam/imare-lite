/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RecognitionProgress.java
 *
 * Created on 2010-02-28, 09:22:21
 */

package pl.umk.mat.imare.gui;

import java.awt.Component;
import java.util.LinkedList;
import pl.umk.mat.imare.gui.related.RecognitionProgressListener;
import pl.umk.mat.imare.reco.RecognitionListener;
import pl.umk.mat.imare.reco.Recognizer;
import pl.umk.mat.imare.reco.Transcriber;
import pl.umk.mat.imare.reco.TranscriptionListener;

/**
 *
 * @author morti
 */
public class RecognitionProgress extends javax.swing.JInternalFrame implements RecognitionListener, TranscriptionListener {

	private LinkedList<RecognitionProgressListener> listeners = new LinkedList<RecognitionProgressListener>();

	private MainGUI mainWindow = null;
    private Recognizer recognizer = null;
    private Transcriber transcriber = null;
	private boolean showNotesAfter = true;

    /** Creates new form RecognitionProgress */
    public RecognitionProgress(Recognizer recognizer, boolean showNotesAfter) {
        this.recognizer = recognizer;
        this.recognizer.addRecognitionListener(this);
		this.showNotesAfter = showNotesAfter;
        initComponents();		
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recognitionProgressBar = new javax.swing.JProgressBar();
        cancelButton = new javax.swing.JButton();

        setTitle("Rozpoznawanie...");
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        cancelButton.setText("Anuluj");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(recognitionProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(cancelButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recognitionProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		recognizer.cancel();
	}//GEN-LAST:event_cancelButtonActionPerformed

	private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
		Component c = getDesktopPane();
		while(!(c instanceof MainGUI) && c != null) c = c.getParent();

		if(c != null) mainWindow = (MainGUI)c;

		int x = (getDesktopPane().getWidth() - getWidth()) / 2;
		int y = (getDesktopPane().getHeight() - getHeight()) / 2;
		setLocation(x, y);
	}//GEN-LAST:event_formAncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JProgressBar recognitionProgressBar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void recognitionFinished(Recognizer recognizer, boolean cancelled) {
		if(cancelled) {
			dispose();
			notifyCancelled();
			return;
		}
		setTitle("Transkrypcja...");
        this.transcriber = new Transcriber(recognizer.getVoice());
        transcriber.addTranscriptionListener(this);
        transcriber.run();
    }

    @Override
    public void progressChanged(Recognizer recognizer, final float newProgress) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                recognitionProgressBar.setValue((int) (newProgress * recognitionProgressBar.getMaximum()));
            }
        });        
    }

    @Override
    public void transcriptionFinished(Transcriber transcriber) {
        mainWindow.setNotes(transcriber.getStaveData());
        if(showNotesAfter) mainWindow.showNoteFrame();
        this.dispose();
		notifyFinished();
    }

	public Transcriber getTranscriber() {
		return transcriber;
	}

	public void addListener(RecognitionProgressListener listener) {
		listeners.add(listener);
	}

	public void removeListener(RecognitionProgressListener listener) {
		listeners.remove(listener);
	}

	private void notifyCancelled() {
		for(RecognitionProgressListener l : listeners) {
			l.cancelled();
		}
	}

	private void notifyFinished() {
		for(RecognitionProgressListener l : listeners) {
			l.allFinished(transcriber);
		}
	}
}
