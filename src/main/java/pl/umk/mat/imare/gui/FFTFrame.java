/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FFTFrame.java
 *
 * Created on 2010-03-04, 18:56:31
 */

package pl.umk.mat.imare.gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;
import pl.umk.mat.imare.reco.SequentialFFT;
import pl.umk.mat.imare.reco.WindowFunctionBlackman;
import pl.umk.mat.imare.reco.WindowFunctionBlackmanNutall;
import pl.umk.mat.imare.reco.WindowFunctionHamming;

/**
 *
 * @author Tyczo
 */
public class FFTFrame extends javax.swing.JInternalFrame {

    private BufferedImage fftImage = null;
    private BufferedImage fftClean = null;
    private Graphics2D fftGraf = null;
    private BufferedImage horizImage = null;
    private BufferedImage verticImage = null;
    //private JPanel panelFFT;
    private int data[], origData[];
    private int waveFreq;
    private int waveSampleSize;
    private SequentialFFT fft = null;
    private double maxValue=0, logMinFreq, logWaveFreq;

    /** Creates new form FFTFrame */
    public FFTFrame(int d[], int freq, int size) {
        initComponents();

        this.setTitle("Analiza widma");

        this.setResizable(true);
        this.setClosable(true);
        //this.setSize(500,200);

        data = new int[d.length];
        origData = new int[d.length];
        System.arraycopy(d, 0, data, 0, d.length);
        System.arraycopy(d, 0, origData, 0, d.length);

        this.waveFreq = freq/2;
        this.logWaveFreq = Math.log10(waveFreq);
        this.waveSampleSize = size;

        switch(d.length){
            case 512: windowSize.setSelectedIndex(0); break;
            case 1024: windowSize.setSelectedIndex(1); break;
            case 2048: windowSize.setSelectedIndex(2); break;
            case 4096: windowSize.setSelectedIndex(3); break;
            case 8192: windowSize.setSelectedIndex(4); break;
            case 16384: windowSize.setSelectedIndex(5); break;
        }

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFFT = new javax.swing.JPanel(){
            @Override
            public void paint(Graphics g){
                super.paint(g);
                g.drawImage(fftImage, 0, 0, null);
            }};
            verticScale = new javax.swing.JPanel(){
                @Override
                public void paint(Graphics g){
                    super.paint(g);
                    g.drawImage(verticImage, 0, 0, null);
                }};
                horizScale = new javax.swing.JPanel(){
                    @Override
                    public void paint(Graphics g){
                        super.paint(g);
                        g.drawImage(horizImage, 0, 0, null);
                    }};
                    optionPanel = new javax.swing.JPanel();
                    positionLabel = new javax.swing.JLabel();
                    windowSize = new javax.swing.JComboBox();
                    windowLabel = new javax.swing.JLabel();
                    windowFunctionLabel = new javax.swing.JLabel();
                    wFunction = new javax.swing.JComboBox();
                    scaleLabel = new javax.swing.JLabel();
                    scaleBox = new javax.swing.JComboBox();

                    setMaximumSize(new java.awt.Dimension(2147483647, 358));
                    setMinimumSize(new java.awt.Dimension(550, 358));
                    setPreferredSize(new java.awt.Dimension(550, 358));
                    addComponentListener(new java.awt.event.ComponentAdapter() {
                        public void componentResized(java.awt.event.ComponentEvent evt) {
                            formComponentResized(evt);
                        }
                    });

                    panelFFT.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseExited(java.awt.event.MouseEvent evt) {
                            panelFFTMouseExited(evt);
                        }
                    });
                    panelFFT.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                        public void mouseMoved(java.awt.event.MouseEvent evt) {
                            panelFFTMouseMoved(evt);
                        }
                    });

                    javax.swing.GroupLayout panelFFTLayout = new javax.swing.GroupLayout(panelFFT);
                    panelFFT.setLayout(panelFFTLayout);
                    panelFFTLayout.setHorizontalGroup(
                        panelFFTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 537, Short.MAX_VALUE)
                    );
                    panelFFTLayout.setVerticalGroup(
                        panelFFTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 227, Short.MAX_VALUE)
                    );

                    javax.swing.GroupLayout verticScaleLayout = new javax.swing.GroupLayout(verticScale);
                    verticScale.setLayout(verticScaleLayout);
                    verticScaleLayout.setHorizontalGroup(
                        verticScaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 43, Short.MAX_VALUE)
                    );
                    verticScaleLayout.setVerticalGroup(
                        verticScaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 227, Short.MAX_VALUE)
                    );

                    javax.swing.GroupLayout horizScaleLayout = new javax.swing.GroupLayout(horizScale);
                    horizScale.setLayout(horizScaleLayout);
                    horizScaleLayout.setHorizontalGroup(
                        horizScaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 537, Short.MAX_VALUE)
                    );
                    horizScaleLayout.setVerticalGroup(
                        horizScaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 21, Short.MAX_VALUE)
                    );

                    windowSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "512", "1024", "2048", "4096", "8192", "16384" }));
                    windowSize.setMinimumSize(new java.awt.Dimension(60, 18));
                    windowSize.setPreferredSize(new java.awt.Dimension(60, 20));
                    windowSize.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            windowSizeActionPerformed(evt);
                        }
                    });

                    windowLabel.setText("Okno:");

                    windowFunctionLabel.setText("Funkcja okna:");

                    wFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dirichlet (flat)", "Blackman", "Blackman-Nutall", "Hamming" }));
                    wFunction.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            wFunctionActionPerformed(evt);
                        }
                    });

                    scaleLabel.setText("Skala:");

                    scaleBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Liniowa", "Logarytmiczna" }));
                    scaleBox.setMaximumSize(new java.awt.Dimension(89, 18));
                    scaleBox.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            scaleBoxActionPerformed(evt);
                        }
                    });

                    javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
                    optionPanel.setLayout(optionPanelLayout);
                    optionPanelLayout.setHorizontalGroup(
                        optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(optionPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(positionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                                .addGroup(optionPanelLayout.createSequentialGroup()
                                    .addComponent(windowLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(windowSize, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(windowFunctionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(scaleLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(scaleBox, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addContainerGap())
                    );
                    optionPanelLayout.setVerticalGroup(
                        optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(optionPanelLayout.createSequentialGroup()
                            .addComponent(positionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(windowFunctionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                                    .addComponent(scaleLabel)
                                    .addComponent(scaleBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(wFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(windowLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(windowSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    );

                    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                    getContentPane().setLayout(layout);
                    layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(verticScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(panelFFT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(horizScale, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(optionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(10, 10, 10))
                    );
                    layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(verticScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(panelFFT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(0, 0, 0)
                            .addComponent(horizScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(11, 11, 11)
                            .addComponent(optionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
                    );

                    pack();
                }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        drawFFT();
    }//GEN-LAST:event_formComponentResized

    private void windowSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowSizeActionPerformed
        int size = Integer.parseInt(windowSize.getSelectedItem().toString());

        if(size<=origData.length && fft!=null){
            data = new int[size];
            System.arraycopy(origData, 0, data, 0, size);
            try {
                drawFFT();
            } catch (Exception ex) {
                MainGUI.displayError(ex,this);
            }
        }
}//GEN-LAST:event_windowSizeActionPerformed

    private void wFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wFunctionActionPerformed
        try {
            drawFFT();
        } catch (Exception ex) {
            MainGUI.displayError(ex,this);
        }
    }//GEN-LAST:event_wFunctionActionPerformed

    private void panelFFTMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelFFTMouseMoved
        if (fftImage == null) {
            return;
        }
        Graphics2D graf = (Graphics2D) fftImage.getGraphics();
        graf.drawImage(fftClean, 0, 0, null);
        graf.setColor(Color.BLUE);

        int pos = 0;
        int x;
        int pos2, szer;
        double f = 0, f1;

        if(scaleBox.getSelectedItem().equals("Logarytmiczna")){
            f = Math.pow(10, evt.getX()/(double)panelFFT.getWidth()*(logWaveFreq-logMinFreq)+logMinFreq);
            pos = (int) (f / waveFreq * fft.getDataCount());
            if(evt.getX()-5>0){
                f1 = Math.pow(10, (evt.getX()-5)/(double)panelFFT.getWidth()*(logWaveFreq-logMinFreq)+logMinFreq);
                pos2 = (int) (f1 / waveFreq * fft.getDataCount());
                szer = pos-pos2;
            }else{
                f1 = Math.pow(10, (evt.getX()+5)/(double)panelFFT.getWidth()*(logWaveFreq-logMinFreq)+logMinFreq);
                pos2 = (int) (f1 / waveFreq * fft.getDataCount());
                szer = pos2-pos;
            }
        }else{
            pos = (int)(evt.getX()/(double)panelFFT.getWidth()*fft.getDataCount());
            if(evt.getX()-5>0){
                pos2 = (int)((evt.getX()-5)/(double)panelFFT.getWidth()*fft.getDataCount());
                szer = pos-pos2;
            }else{
                pos2 = (int)((evt.getX()+5)/(double)panelFFT.getWidth()*fft.getDataCount());
                szer = pos2-pos;
            }
        }

        double max = fft.getData(pos);
        x = pos;

        for(int i=-szer;i<szer;i++){
            if((pos+i>0)&&(pos+i<fft.getDataCount())){
                if(fft.getData(i+pos)>max){
                    x = i+pos;
                    max = fft.getData(i+pos);
                }
            }
        }
        String tekst = "";
        if(scaleBox.getSelectedItem().equals("Logarytmiczna")){
            pos2 = (int) ((Math.log10(x / (double) fft.getDataCount() * waveFreq)-logMinFreq)/ (logWaveFreq-logMinFreq) * panelFFT.getWidth());
            graf.drawLine(pos2, 0, pos2, panelFFT.getHeight());
            tekst = "Pozycja: "+(int)f+" Hz";
            tekst+=" = "+(int)(20*Math.log10(fft.getData(pos)/maxValue))+" dB";
            tekst+="     Szczyt: "+(int)(x/(double)fft.getDataCount()*waveFreq)+" Hz";
            tekst+=" = "+(int)(20*Math.log10(fft.getData(x)/maxValue))+" dB";
        }else{
            pos2 = (int)(x/(double)fft.getDataCount()*panelFFT.getWidth());
            graf.drawLine(pos2, 0, pos2, panelFFT.getHeight());
            tekst = "Pozycja: "+Integer.toString((int)(evt.getX()/(double)panelFFT.getWidth()*waveFreq))+" Hz";
            tekst+=" = "+(int)(20*Math.log10(fft.getData(pos)/maxValue))+" dB";
            tekst+="     Szczyt: "+(int)(x/(double)fft.getDataCount()*waveFreq)+" Hz";
            tekst+=" = "+(int)(20*Math.log10(fft.getData(x)/maxValue))+" dB";
        }
        positionLabel.setText(tekst);
        panelFFT.repaint();
    }//GEN-LAST:event_panelFFTMouseMoved

    private void panelFFTMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelFFTMouseExited
        Graphics2D graf = (Graphics2D) fftImage.getGraphics();
        graf.drawImage(fftClean, 0, 0, null);
        positionLabel.setText("");
        panelFFT.repaint();
    }//GEN-LAST:event_panelFFTMouseExited

    private void scaleBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleBoxActionPerformed
        try {
                drawFFT();
            } catch (Exception ex) {
                MainGUI.displayError(ex,this);
            }
    }//GEN-LAST:event_scaleBoxActionPerformed

    public void drawFFT(){
        fft = new SequentialFFT(data.length);
        if(wFunction.getSelectedItem().toString().equals("Dirichlet (flat)")) fft.setWindowFunction(null);
        if(wFunction.getSelectedItem().toString().equals("Blackman")) fft.setWindowFunction(new WindowFunctionBlackman());
        if(wFunction.getSelectedItem().toString().equals("Blackman-Nutall")) fft.setWindowFunction(new WindowFunctionBlackmanNutall());
        if(wFunction.getSelectedItem().toString().equals("Hamming")) fft.setWindowFunction(new WindowFunctionHamming());


		/**
		 * Funkcja okna powinna być ustawiana na oknie FFT.
		 * Powstaje tylko pytanie - w jaki sposób wybrać
		 * funkcję okna dla rozpoznawacza. W oknie głównym
		 * nie powinno być (ale jako statyczna NIE MOŻE)
		 * - morti ^^
		 */
        //fft.setWindowFunction(MainGUI.wf);
        
        fftImage = new BufferedImage(panelFFT.getWidth(), panelFFT.getHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics2D graf = (Graphics2D) fftImage.getGraphics();

        /* Obraz FFT dla przerysowywania linii podczas ruchu myszą */
        fftClean = new BufferedImage(panelFFT.getWidth(), panelFFT.getHeight(), BufferedImage.TYPE_INT_RGB);
        fftGraf = (Graphics2D) fftClean.getGraphics();

        fft.process(data);
        panelFFT.repaint();

        /* Rysowanie poziomej podziałki */
        horizScale.setSize(panelFFT.getWidth(), horizScale.getHeight());
        horizImage = new BufferedImage(horizScale.getWidth(), horizScale.getHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics2D horizGraf = (Graphics2D)horizImage.getGraphics();
        horizGraf.setColor(Color.WHITE);
        horizGraf.fillRect(0, 0, horizScale.getWidth(), horizScale.getHeight());
        horizGraf.setColor(Color.BLACK);
        double freq;
        String str="Hz";
/*
        double step = waveFreq/(double)(11*1000);
        double space = horizScale.getWidth()/(double)(waveFreq/1000);
        int pos;
        DecimalFormat nf = new DecimalFormat("0.0");

        for(int i=0; i<11; i++){
            freq = i*step;
            pos = (int)(freq*space);

            if(scaleBox.getSelectedItem().equals("Logarytmiczna")){
                freq = Math.pow(10, (pos/(double)panelFFT.getWidth())*logWaveFreq);
                freq = Math.round(freq);
                pos = (int) ((Math.log10(freq) / logWaveFreq) * panelFFT.getWidth());
                freq/=1000;
            }

            str = "Hz";

            horizGraf.drawLine(pos, 0, pos, horizScale.getHeight());
            if(freq>=1){
                str = " kHz";
            }
            else freq*=1000;

            if(scaleBox.getSelectedItem().equals("Logarytmiczna")){
                
                System.out.println(freq);
                if(freq>1 && str.equals(" kHz")) str = nf.format(freq)+str;
                else str = Integer.toString((int)freq)+str;
            }else{
                str = Integer.toString((int)freq)+str;
            }

            horizGraf.drawString(str, pos+5, 10);

        }
*/
        int step = fft.getDataCount()/11;
        //double space = horizScale.getWidth()/(double)(waveFreq/1000);
        int pos;
        logMinFreq = Math.log10((1/(double)fft.getDataCount()*waveFreq));
        DecimalFormat nf = new DecimalFormat("0.0");

        for(int i=1; i<fft.getDataCount(); i+=step){
            freq = (i/(double)fft.getDataCount()*waveFreq);
            pos = (int)(freq/waveFreq*panelFFT.getWidth());
            freq/=1000;

            if(scaleBox.getSelectedItem().equals("Logarytmiczna")){
                freq = Math.pow(10, (pos/(double)panelFFT.getWidth())*(logWaveFreq-logMinFreq)+logMinFreq);
                //freq = Math.round(freq);
                //pos = (int) (((Math.log10(freq)-Math.log10(minFreq)) / (logWaveFreq-Math.log10(minFreq))) * panelFFT.getWidth());
                freq/=1000;
            }

            str = "Hz";

            horizGraf.drawLine(pos, 0, pos, horizScale.getHeight());
            if(freq>=1){
                str = " kHz";
            }
            else freq*=1000;

            if(scaleBox.getSelectedItem().equals("Logarytmiczna")){

                //System.out.println(freq);
                if(freq>1 && str.equals(" kHz")) str = nf.format(freq)+str;
                else str = Integer.toString((int)freq)+str;
            }else{
                str = Integer.toString((int)freq)+str;
            }

            horizGraf.drawString(str, pos+5, 10);

        }
        /* koniec rysowania poziomej podziałki */

        /* rysowanie pionowej podziałki */
        verticScale.setSize(verticScale.getWidth(), panelFFT.getHeight());
        verticImage = new BufferedImage(verticScale.getWidth(), verticScale.getHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics2D verticGraf = (Graphics2D)verticImage.getGraphics();
        verticGraf.setColor(Color.WHITE);
        verticGraf.fillRect(0, 0, verticScale.getWidth(), verticScale.getHeight());
        verticGraf.setColor(Color.BLACK);
        verticGraf.drawLine(verticScale.getWidth()-1, 0, verticScale.getWidth()-1, verticScale.getHeight());

        int dB = (int) Math.round(10 * waveSampleSize * Math.log10(2.0));
        step = verticScale.getHeight()/10;
        int val;

        for(int i=0; i<10; i++){

            verticGraf.drawLine(0, (int)(i*step), verticScale.getWidth(), (int)(i*step));
            val = (int)(i*step/(double)verticScale.getHeight()*dB);
            verticGraf.drawString(Integer.toString(val)+" dB", 2, (int)(i*step+11));
        }
        /* koniec rysowania pionowej podziałki */

        double logMaxValue=0;
        for(int i=1; i<fft.getDataCount(); ++i){
            logMaxValue = Math.max(logMaxValue, fft.getData(i));
        }

        if (logMaxValue<=0) return;
        maxValue = logMaxValue;

        logMaxValue = Math.log10(logMaxValue);       

        int X = fftImage.getWidth();

        double tmax[] = new double[X];
        double tmin[] = new double[X];
        double tsum[] = new double[X];
        int count[] = new int[X];
        for (int x=0; x<X; ++x) {
            tmax[x] = Double.NEGATIVE_INFINITY;
            tmin[x] = Double.POSITIVE_INFINITY;
        }

        for (int i=1; i<fft.getDataCount(); ++i) {
            int x;
            if (scaleBox.getSelectedItem().equals("Logarytmiczna")) {
                double f = i / (double) fft.getDataCount() * waveFreq;
                x = (int) ((Math.log10(f) - logMinFreq) / (logWaveFreq - logMinFreq) * X);
            } else {
                x = X * i / fft.getDataCount();
            }
            double v = fft.getData(i);
            tsum[x] += v;
            ++count[x];
            tmax[x] = Math.max(tmax[x], v);
            tmin[x] = Math.min(tmin[x], v);
        }

        graf.setColor(Color.WHITE);
        graf.fillRect(0, 0, fftImage.getWidth(), fftImage.getHeight());
        graf.setColor(new Color(120,1,120));

        final double bells = 0.1 * dB;
        int old = Integer.MIN_VALUE;
        for (int x=0; x<X; ++x) {
            if (count[x]>0) {
                tsum[x] = tsum[x]<=0 ? 0.0 : 1.0 + (Math.log10(tsum[x]/count[x]) - logMaxValue)/bells;
                tmin[x] = tmin[x]<=0 ? 0.0 : 1.0 + (Math.log10(tmin[x]) - logMaxValue)/bells;
                tmax[x] = tmax[x]<=0 ? 0.0 : 1.0 + (Math.log10(tmax[x]) - logMaxValue)/bells;

                if (old >= 0)
                {
                    for (int ix=old+1; ix<x; ++ix) {
                        double t = (double)(ix-old) / (double)(x-old);
                        double ta = (1-t)*(1-t);
                        double tb = t*t;
                        double denom = 1/(ta + tb);
                        tsum[ix] = (ta*tsum[old] + tb*tsum[x])*denom;
                        tmin[ix] = (ta*tmin[old] + tb*tmin[x])*denom;
                        tmax[ix] = (ta*tmax[old] + tb*tmax[x])*denom;
                    }
                } else {
                    for (int ix=0; ix<x; ++ix) {
                        tsum[ix] = tsum[x];
                        tmin[ix] = tmin[x];
                        tmax[ix] = tmax[x];
                    }
                }
                old = x;
            }
        }

        if (old >= 0) {
            for (int x=old+1; x<X; ++x) {
                tsum[x] = tsum[old];
                tmin[x] = tmin[old];
                tmax[x] = tmax[old];
            }
            for (int x=0; x<X; ++x)
            {
                graf.setColor(new Color(200,1,180));
                graf.drawLine(x, fftImage.getHeight(), x, (int)Math.round(fftImage.getHeight()*(1-tmax[x])));
                graf.setColor(new Color(120,1,120));
                graf.drawLine(x, fftImage.getHeight(), x, (int)Math.round(fftImage.getHeight()*(1-tsum[x])));
                graf.setColor(new Color(80,1,80));
                graf.drawLine(x, fftImage.getHeight(), x, (int)Math.round(fftImage.getHeight()*(1-tmin[x])));
            }
        }
        
        this.repaint();
        
        /* zapisanie pierwotnego obrazu FFT, potrzebne do rysowania linii */
        fftGraf.drawImage(fftImage, 0, 0, null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel horizScale;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JPanel panelFFT;
    private javax.swing.JLabel positionLabel;
    private javax.swing.JComboBox scaleBox;
    private javax.swing.JLabel scaleLabel;
    private javax.swing.JPanel verticScale;
    private javax.swing.JComboBox wFunction;
    private javax.swing.JLabel windowFunctionLabel;
    private javax.swing.JLabel windowLabel;
    private javax.swing.JComboBox windowSize;
    // End of variables declaration//GEN-END:variables

}
