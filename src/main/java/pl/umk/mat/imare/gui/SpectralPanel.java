/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SpectralPanel.java
 *
 * Created on 2010-04-27, 17:03:55
 */
package pl.umk.mat.imare.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.image.BufferedImage;
import pl.umk.mat.imare.reco.Note;
import pl.umk.mat.imare.reco.RTListener;
import pl.umk.mat.imare.reco.RTRecognizer;
import pl.umk.mat.imare.reco.RTRecognizer.PixelType;

/**
 *
 * @author morti
 */
public class SpectralPanel extends javax.swing.JPanel implements RTListener {

    private BufferedImage pastSpecImage = null;
    private final int historyLength = 100;
    private int stepSize;
    static private final float BLUE_LEVEL = 0.25f;

    /** Creates new form SpectralPanel */
    public SpectralPanel() {
        initComponents();

        addComponentListener(new ComponentListener() {

            @Override
            public void componentResized(ComponentEvent e) {
                Dimension size = e.getComponent().getSize();
                pastSpecImage = new BufferedImage(size.width, size.height, BufferedImage.TYPE_INT_ARGB);
                Graphics2D g = pastSpecImage.createGraphics();

                g.setColor(new Color(238, 238, 238));
                g.fillRect(0, 0, size.width, size.height);
                stepSize = size.width / historyLength;
            }

            @Override
            public void componentMoved(ComponentEvent e) {
            }

            @Override
            public void componentShown(ComponentEvent e) {
            }

            @Override
            public void componentHidden(ComponentEvent e) {
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 336, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics gr) {
        super.paint(gr);
        Graphics2D g = (Graphics2D) gr;
        g.drawImage(pastSpecImage, 0, 0, null);
    }

    @Override
    public void spectrumNotification(RTRecognizer reco, final double[] spectrum, final PixelType[] active) {
        int x = stepSize * (historyLength - 1);
        double h = (double) getHeight() / (double) spectrum.length;
        int last = getHeight();

        Graphics2D g = pastSpecImage.createGraphics();
        BufferedImage part = pastSpecImage.getSubimage(stepSize, 0, stepSize * (historyLength - 1), pastSpecImage.getHeight());
        g.drawImage(part, 0, 0, null);

        Color c;
        for (int i = 0; i < spectrum.length; i++) {
            float spec = (float) spectrum[i];
            float specBlue = (1.0f - BLUE_LEVEL) * spec;
            switch (active[i]) {
                case HIGH:
                    //spec = (int) (spectrum[i] * 115.0);
                    //c = new Color(114 + spec, 140 + spec, 37);
                    c = new Color(spec, spec, BLUE_LEVEL);
                    break;
                case FAKE:
                    //spec = (int) (spectrum[i] * 135.0);
                    //c = new Color(120 + spec, 81, 36);
                    c = new Color(spec, 0, BLUE_LEVEL);
                    break;
                default:
                    //spec = (int) (spectrum[i] * 135.0);
                    //c = new Color(36, 81, 120 + spec);
                    c = new Color(0, 0, BLUE_LEVEL + specBlue);
            }
            g.setColor(c);

            int cur = (int) (getHeight() - i * h - 1);
            g.fillRect(x, cur, getWidth() - x, (int) h + (last - cur));
            last = cur;
        }

        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                repaint();
            }
        });
    }

    @Override
    public void noteFound(RTRecognizer reco, Note n) {
    }

    @Override
    public void recognitionFinished(RTRecognizer reco) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
